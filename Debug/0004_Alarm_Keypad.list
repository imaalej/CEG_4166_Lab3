
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e24  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d0  080076d0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d8  080076d8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076dc  080076dc  000176dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080076e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044dc  20000024  08007704  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004500  08007704  00024500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017840  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d2  00000000  00000000  000378d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  0003afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001124  00000000  00000000  0003c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024960  00000000  00000000  0003d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1ad  00000000  00000000  0006200c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc7db  00000000  00000000  0007d1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c60  00000000  00000000  00159994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000024 	.word	0x20000024
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006894 	.word	0x08006894

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000028 	.word	0x20000028
 800020c:	08006894 	.word	0x08006894

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	int done=1;
 8000512:	2301      	movs	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
	while(done)
 8000516:	e19b      	b.n	8000850 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051e:	48b3      	ldr	r0, [pc, #716]	; (80007ec <Get_Key+0x2e0>)
 8000520:	f001 fc1a 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000524:	2200      	movs	r2, #0
 8000526:	2110      	movs	r1, #16
 8000528:	48b0      	ldr	r0, [pc, #704]	; (80007ec <Get_Key+0x2e0>)
 800052a:	f001 fc15 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800052e:	2200      	movs	r2, #0
 8000530:	2120      	movs	r1, #32
 8000532:	48ae      	ldr	r0, [pc, #696]	; (80007ec <Get_Key+0x2e0>)
 8000534:	f001 fc10 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	48ab      	ldr	r0, [pc, #684]	; (80007ec <Get_Key+0x2e0>)
 800053e:	f001 fc0b 	bl	8001d58 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	48a9      	ldr	r0, [pc, #676]	; (80007ec <Get_Key+0x2e0>)
 8000546:	f001 fbef 	bl	8001d28 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00b      	beq.n	8000568 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000550:	bf00      	nop
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	48a5      	ldr	r0, [pc, #660]	; (80007ec <Get_Key+0x2e0>)
 8000556:	f001 fbe7 	bl	8001d28 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f8      	bne.n	8000552 <Get_Key+0x46>
		key='1';
 8000560:	4ba3      	ldr	r3, [pc, #652]	; (80007f0 <Get_Key+0x2e4>)
 8000562:	2231      	movs	r2, #49	; 0x31
 8000564:	701a      	strb	r2, [r3, #0]
		break;
 8000566:	e177      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	48a2      	ldr	r0, [pc, #648]	; (80007f4 <Get_Key+0x2e8>)
 800056c:	f001 fbdc 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00b      	beq.n	800058e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000576:	bf00      	nop
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	489e      	ldr	r0, [pc, #632]	; (80007f4 <Get_Key+0x2e8>)
 800057c:	f001 fbd4 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f8      	bne.n	8000578 <Get_Key+0x6c>
		key='4';
 8000586:	4b9a      	ldr	r3, [pc, #616]	; (80007f0 <Get_Key+0x2e4>)
 8000588:	2234      	movs	r2, #52	; 0x34
 800058a:	701a      	strb	r2, [r3, #0]
		break;
 800058c:	e164      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	4899      	ldr	r0, [pc, #612]	; (80007f8 <Get_Key+0x2ec>)
 8000594:	f001 fbc8 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00c      	beq.n	80005b8 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800059e:	bf00      	nop
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	4894      	ldr	r0, [pc, #592]	; (80007f8 <Get_Key+0x2ec>)
 80005a6:	f001 fbbf 	bl	8001d28 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1f7      	bne.n	80005a0 <Get_Key+0x94>
		key='7';
 80005b0:	4b8f      	ldr	r3, [pc, #572]	; (80007f0 <Get_Key+0x2e4>)
 80005b2:	2237      	movs	r2, #55	; 0x37
 80005b4:	701a      	strb	r2, [r3, #0]
		break;
 80005b6:	e14f      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	488e      	ldr	r0, [pc, #568]	; (80007f8 <Get_Key+0x2ec>)
 80005be:	f001 fbb3 	bl	8001d28 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00c      	beq.n	80005e2 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005c8:	bf00      	nop
 80005ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ce:	488a      	ldr	r0, [pc, #552]	; (80007f8 <Get_Key+0x2ec>)
 80005d0:	f001 fbaa 	bl	8001d28 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f7      	bne.n	80005ca <Get_Key+0xbe>
		key='*';
 80005da:	4b85      	ldr	r3, [pc, #532]	; (80007f0 <Get_Key+0x2e4>)
 80005dc:	222a      	movs	r2, #42	; 0x2a
 80005de:	701a      	strb	r2, [r3, #0]
		break;
 80005e0:	e13a      	b.n	8000858 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	4880      	ldr	r0, [pc, #512]	; (80007ec <Get_Key+0x2e0>)
 80005ea:	f001 fbb5 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	487e      	ldr	r0, [pc, #504]	; (80007ec <Get_Key+0x2e0>)
 80005f4:	f001 fbb0 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	487b      	ldr	r0, [pc, #492]	; (80007ec <Get_Key+0x2e0>)
 80005fe:	f001 fbab 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	4879      	ldr	r0, [pc, #484]	; (80007ec <Get_Key+0x2e0>)
 8000608:	f001 fba6 	bl	8001d58 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	4877      	ldr	r0, [pc, #476]	; (80007ec <Get_Key+0x2e0>)
 8000610:	f001 fb8a 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800061a:	bf00      	nop
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4873      	ldr	r0, [pc, #460]	; (80007ec <Get_Key+0x2e0>)
 8000620:	f001 fb82 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <Get_Key+0x110>
		key='2';
 800062a:	4b71      	ldr	r3, [pc, #452]	; (80007f0 <Get_Key+0x2e4>)
 800062c:	2232      	movs	r2, #50	; 0x32
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e112      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	486f      	ldr	r0, [pc, #444]	; (80007f4 <Get_Key+0x2e8>)
 8000636:	f001 fb77 	bl	8001d28 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000640:	bf00      	nop
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	486b      	ldr	r0, [pc, #428]	; (80007f4 <Get_Key+0x2e8>)
 8000646:	f001 fb6f 	bl	8001d28 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f8      	bne.n	8000642 <Get_Key+0x136>
		key='5';
 8000650:	4b67      	ldr	r3, [pc, #412]	; (80007f0 <Get_Key+0x2e4>)
 8000652:	2235      	movs	r2, #53	; 0x35
 8000654:	701a      	strb	r2, [r3, #0]
		break;
 8000656:	e0ff      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	4866      	ldr	r0, [pc, #408]	; (80007f8 <Get_Key+0x2ec>)
 800065e:	f001 fb63 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00c      	beq.n	8000682 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000668:	bf00      	nop
 800066a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <Get_Key+0x2ec>)
 8000670:	f001 fb5a 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f7      	bne.n	800066a <Get_Key+0x15e>
		key='8';
 800067a:	4b5d      	ldr	r3, [pc, #372]	; (80007f0 <Get_Key+0x2e4>)
 800067c:	2238      	movs	r2, #56	; 0x38
 800067e:	701a      	strb	r2, [r3, #0]
		break;
 8000680:	e0ea      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	485c      	ldr	r0, [pc, #368]	; (80007f8 <Get_Key+0x2ec>)
 8000688:	f001 fb4e 	bl	8001d28 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00c      	beq.n	80006ac <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000692:	bf00      	nop
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4857      	ldr	r0, [pc, #348]	; (80007f8 <Get_Key+0x2ec>)
 800069a:	f001 fb45 	bl	8001d28 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f7      	bne.n	8000694 <Get_Key+0x188>
		key='0';
 80006a4:	4b52      	ldr	r3, [pc, #328]	; (80007f0 <Get_Key+0x2e4>)
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	701a      	strb	r2, [r3, #0]
		break;
 80006aa:	e0d5      	b.n	8000858 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	484e      	ldr	r0, [pc, #312]	; (80007ec <Get_Key+0x2e0>)
 80006b4:	f001 fb50 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006b8:	2200      	movs	r2, #0
 80006ba:	2110      	movs	r1, #16
 80006bc:	484b      	ldr	r0, [pc, #300]	; (80007ec <Get_Key+0x2e0>)
 80006be:	f001 fb4b 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	4849      	ldr	r0, [pc, #292]	; (80007ec <Get_Key+0x2e0>)
 80006c8:	f001 fb46 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	4846      	ldr	r0, [pc, #280]	; (80007ec <Get_Key+0x2e0>)
 80006d2:	f001 fb41 	bl	8001d58 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4844      	ldr	r0, [pc, #272]	; (80007ec <Get_Key+0x2e0>)
 80006da:	f001 fb25 	bl	8001d28 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006e4:	bf00      	nop
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	4840      	ldr	r0, [pc, #256]	; (80007ec <Get_Key+0x2e0>)
 80006ea:	f001 fb1d 	bl	8001d28 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <Get_Key+0x1da>
		key='3';
 80006f4:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <Get_Key+0x2e4>)
 80006f6:	2233      	movs	r2, #51	; 0x33
 80006f8:	701a      	strb	r2, [r3, #0]
		break;
 80006fa:	e0ad      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	483d      	ldr	r0, [pc, #244]	; (80007f4 <Get_Key+0x2e8>)
 8000700:	f001 fb12 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00b      	beq.n	8000722 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800070a:	bf00      	nop
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4839      	ldr	r0, [pc, #228]	; (80007f4 <Get_Key+0x2e8>)
 8000710:	f001 fb0a 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f8      	bne.n	800070c <Get_Key+0x200>
		key='6';
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <Get_Key+0x2e4>)
 800071c:	2236      	movs	r2, #54	; 0x36
 800071e:	701a      	strb	r2, [r3, #0]
		break;
 8000720:	e09a      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000726:	4834      	ldr	r0, [pc, #208]	; (80007f8 <Get_Key+0x2ec>)
 8000728:	f001 fafe 	bl	8001d28 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00c      	beq.n	800074c <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000732:	bf00      	nop
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	482f      	ldr	r0, [pc, #188]	; (80007f8 <Get_Key+0x2ec>)
 800073a:	f001 faf5 	bl	8001d28 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f7      	bne.n	8000734 <Get_Key+0x228>
		key='9';
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <Get_Key+0x2e4>)
 8000746:	2239      	movs	r2, #57	; 0x39
 8000748:	701a      	strb	r2, [r3, #0]
		break;
 800074a:	e085      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	4829      	ldr	r0, [pc, #164]	; (80007f8 <Get_Key+0x2ec>)
 8000752:	f001 fae9 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00c      	beq.n	8000776 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800075c:	bf00      	nop
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	4825      	ldr	r0, [pc, #148]	; (80007f8 <Get_Key+0x2ec>)
 8000764:	f001 fae0 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f7      	bne.n	800075e <Get_Key+0x252>
		key='#';
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <Get_Key+0x2e4>)
 8000770:	2223      	movs	r2, #35	; 0x23
 8000772:	701a      	strb	r2, [r3, #0]
		break;
 8000774:	e070      	b.n	8000858 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <Get_Key+0x2e0>)
 800077e:	f001 faeb 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <Get_Key+0x2e0>)
 8000788:	f001 fae6 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <Get_Key+0x2e0>)
 8000792:	f001 fae1 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000796:	2201      	movs	r2, #1
 8000798:	2108      	movs	r1, #8
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <Get_Key+0x2e0>)
 800079c:	f001 fadc 	bl	8001d58 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <Get_Key+0x2e0>)
 80007a4:	f001 fac0 	bl	8001d28 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007ae:	bf00      	nop
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <Get_Key+0x2e0>)
 80007b4:	f001 fab8 	bl	8001d28 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <Get_Key+0x2a4>
		key='A';
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <Get_Key+0x2e4>)
 80007c0:	2241      	movs	r2, #65	; 0x41
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e048      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	480a      	ldr	r0, [pc, #40]	; (80007f4 <Get_Key+0x2e8>)
 80007ca:	f001 faad 	bl	8001d28 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007d4:	bf00      	nop
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <Get_Key+0x2e8>)
 80007da:	f001 faa5 	bl	8001d28 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f8      	bne.n	80007d6 <Get_Key+0x2ca>
		key='B';
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <Get_Key+0x2e4>)
 80007e6:	2242      	movs	r2, #66	; 0x42
 80007e8:	701a      	strb	r2, [r3, #0]
		break;
 80007ea:	e035      	b.n	8000858 <Get_Key+0x34c>
 80007ec:	40020400 	.word	0x40020400
 80007f0:	20000040 	.word	0x20000040
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <Get_Key+0x360>)
 8000802:	f001 fa91 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <Get_Key+0x360>)
 8000814:	f001 fa88 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x302>
		key='C';
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <Get_Key+0x364>)
 8000820:	2243      	movs	r2, #67	; 0x43
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e018      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <Get_Key+0x360>)
 800082c:	f001 fa7c 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00c      	beq.n	8000850 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000836:	bf00      	nop
 8000838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <Get_Key+0x360>)
 800083e:	f001 fa73 	bl	8001d28 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f7      	bne.n	8000838 <Get_Key+0x32c>
		key='D';
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <Get_Key+0x364>)
 800084a:	2244      	movs	r2, #68	; 0x44
 800084c:	701a      	strb	r2, [r3, #0]
		break;
 800084e:	e003      	b.n	8000858 <Get_Key+0x34c>
	while(done)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f47f ae60 	bne.w	8000518 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000858:	2120      	movs	r1, #32
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <Get_Key+0x360>)
 800085c:	f001 fa95 	bl	8001d8a <HAL_GPIO_TogglePin>
	return(key);
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <Get_Key+0x364>)
 8000862:	781b      	ldrb	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020000 	.word	0x40020000
 8000870:	20000040 	.word	0x20000040

08000874 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <vApplicationGetIdleTaskMemory+0x30>)
 800088a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000044 	.word	0x20000044
 80008a4:	20000098 	.word	0x20000098

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b0a0      	sub	sp, #128	; 0x80
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 ff5f 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f8a7 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f96b 	bl	8000b90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008ba:	f000 f93f 	bl	8000b3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008be:	f000 f90f 	bl	8000ae0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 80008c2:	f000 faf9 	bl	8000eb8 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fc5f 	bl	800118c <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	493f      	ldr	r1, [pc, #252]	; (80009d0 <main+0x128>)
 80008d2:	4840      	ldr	r0, [pc, #256]	; (80009d4 <main+0x12c>)
 80008d4:	f000 fcf0 	bl	80012b8 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80008d8:	211e      	movs	r1, #30
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fc56 	bl	800118c <SSD1306_GotoXY>
    //SSD1306_Puts (code, &Font_11x18, 1);
    SSD1306_UpdateScreen();
 80008e0:	f000 fbae 	bl	8001040 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 80008e4:	f000 fbac 	bl	8001040 <SSD1306_UpdateScreen>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2104      	movs	r1, #4
 80008ec:	483a      	ldr	r0, [pc, #232]	; (80009d8 <main+0x130>)
 80008ee:	f001 fa33 	bl	8001d58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	4838      	ldr	r0, [pc, #224]	; (80009d8 <main+0x130>)
 80008f8:	f001 fa2e 	bl	8001d58 <HAL_GPIO_WritePin>

    HAL_Delay (500);
 80008fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000900:	f000 ff78 	bl	80017f4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of keypadMytexHandle */
  osMutexDef(keypadMytexHandle);
 8000904:	2300      	movs	r3, #0
 8000906:	67bb      	str	r3, [r7, #120]	; 0x78
 8000908:	2300      	movs	r3, #0
 800090a:	67fb      	str	r3, [r7, #124]	; 0x7c
  keypadMytexHandleHandle = osMutexCreate(osMutex(keypadMytexHandle));
 800090c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fc32 	bl	800417a <osMutexCreate>
 8000916:	4603      	mov	r3, r0
 8000918:	4a30      	ldr	r2, [pc, #192]	; (80009dc <main+0x134>)
 800091a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayMutexHandle */
  osMutexDef(displayMutexHandle);
 800091c:	2300      	movs	r3, #0
 800091e:	673b      	str	r3, [r7, #112]	; 0x70
 8000920:	2300      	movs	r3, #0
 8000922:	677b      	str	r3, [r7, #116]	; 0x74
  displayMutexHandleHandle = osMutexCreate(osMutex(displayMutexHandle));
 8000924:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000928:	4618      	mov	r0, r3
 800092a:	f003 fc26 	bl	800417a <osMutexCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <main+0x138>)
 8000932:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <main+0x13c>)
 8000936:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800093a:	461d      	mov	r5, r3
 800093c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000940:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000948:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fbb3 	bl	80040ba <osThreadCreate>
 8000954:	4603      	mov	r3, r0
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <main+0x140>)
 8000958:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask01, osPriorityIdle, 0, 128);
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <main+0x144>)
 800095c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000960:	461d      	mov	r5, r3
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800096e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fba0 	bl	80040ba <osThreadCreate>
 800097a:	4603      	mov	r3, r0
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <main+0x148>)
 800097e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask02, osPriorityIdle, 0, 128);
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <main+0x14c>)
 8000982:	f107 041c 	add.w	r4, r7, #28
 8000986:	461d      	mov	r5, r3
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fb8d 	bl	80040ba <osThreadCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <main+0x150>)
 80009a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, StartTask03, osPriorityIdle, 0, 128);
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <main+0x154>)
 80009a8:	463c      	mov	r4, r7
 80009aa:	461d      	mov	r5, r3
 80009ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80009b8:	463b      	mov	r3, r7
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fb7c 	bl	80040ba <osThreadCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <main+0x158>)
 80009c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009c8:	f003 fb70 	bl	80040ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <main+0x124>
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	080068ac 	.word	0x080068ac
 80009d8:	40020800 	.word	0x40020800
 80009dc:	20000344 	.word	0x20000344
 80009e0:	20000348 	.word	0x20000348
 80009e4:	080068c4 	.word	0x080068c4
 80009e8:	20000334 	.word	0x20000334
 80009ec:	080068e8 	.word	0x080068e8
 80009f0:	20000338 	.word	0x20000338
 80009f4:	0800690c 	.word	0x0800690c
 80009f8:	2000033c 	.word	0x2000033c
 80009fc:	08006930 	.word	0x08006930
 8000a00:	20000340 	.word	0x20000340

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2234      	movs	r2, #52	; 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 feea 	bl	80067ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a29      	ldr	r2, [pc, #164]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <SystemClock_Config+0xd8>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <SystemClock_Config+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fadc 	bl	8003050 <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9e:	f000 fa05 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	2102      	movs	r1, #2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 ff4a 	bl	8002958 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aca:	f000 f9ef 	bl	8000eac <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3750      	adds	r7, #80	; 0x50
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <MX_I2C1_Init+0x54>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x58>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b1e:	f001 f94f 	bl	8001dc0 <HAL_I2C_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b28:	f000 f9c0 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000298 	.word	0x20000298
 8000b34:	40005400 	.word	0x40005400
 8000b38:	00061a80 	.word	0x00061a80

08000b3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_USART2_UART_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f002 ffac 	bl	8003ad0 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7e:	f000 f995 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002ec 	.word	0x200002ec
 8000b8c:	40004400 	.word	0x40004400

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a42      	ldr	r2, [pc, #264]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b40      	ldr	r3, [pc, #256]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a3b      	ldr	r2, [pc, #236]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a34      	ldr	r2, [pc, #208]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2123      	movs	r1, #35	; 0x23
 8000c1a:	4828      	ldr	r0, [pc, #160]	; (8000cbc <MX_GPIO_Init+0x12c>)
 8000c1c:	f001 f89c 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c26:	4826      	ldr	r0, [pc, #152]	; (8000cc0 <MX_GPIO_Init+0x130>)
 8000c28:	f001 f896 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000c2c:	2323      	movs	r3, #35	; 0x23
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	481e      	ldr	r0, [pc, #120]	; (8000cbc <MX_GPIO_Init+0x12c>)
 8000c44:	f000 fedc 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c48:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4817      	ldr	r0, [pc, #92]	; (8000cc0 <MX_GPIO_Init+0x130>)
 8000c62:	f000 fecd 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <MX_GPIO_Init+0x134>)
 8000c7a:	f000 fec1 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480a      	ldr	r0, [pc, #40]	; (8000cbc <MX_GPIO_Init+0x12c>)
 8000c94:	f000 feb4 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c98:	2340      	movs	r3, #64	; 0x40
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_GPIO_Init+0x130>)
 8000cac:	f000 fea8 	bl	8001a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f003 fa3e 	bl	8004152 <osDelay>
 8000cd6:	e7fb      	b.n	8000cd0 <StartDefaultTask+0x8>

08000cd8 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
	for(;;) {
		osDelay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f003 fa36 	bl	8004152 <osDelay>

		osMutexWait(keypadMytexHandleHandle, osWaitForever);
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <StartTask01+0xe4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f04f 31ff 	mov.w	r1, #4294967295
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 fa5c 	bl	80041ac <osMutexWait>
		key = Get_Key();
 8000cf4:	f7ff fc0a 	bl	800050c <Get_Key>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <StartTask01+0xe8>)
 8000cfe:	701a      	strb	r2, [r3, #0]
		osMutexRelease(keypadMytexHandleHandle);
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <StartTask01+0xe4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 fa9f 	bl	8004248 <osMutexRelease>

		if (key == '*') {
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <StartTask01+0xe8>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d10:	d13b      	bne.n	8000d8a <StartTask01+0xb2>
			if (!armed) {
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <StartTask01+0xec>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d11b      	bne.n	8000d52 <StartTask01+0x7a>
				// If the system is not armed, arm it with the entered code
				if (codeLength == 4) {
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <StartTask01+0xf0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d111      	bne.n	8000d46 <StartTask01+0x6e>
//					strcpy(userCode, enteredUserCode);
					strcpy(code, enteredUserCode);
 8000d22:	492a      	ldr	r1, [pc, #168]	; (8000dcc <StartTask01+0xf4>)
 8000d24:	482a      	ldr	r0, [pc, #168]	; (8000dd0 <StartTask01+0xf8>)
 8000d26:	f005 fd9f 	bl	8006868 <strcpy>
					armed = 1;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <StartTask01+0xec>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2104      	movs	r1, #4
 8000d34:	4827      	ldr	r0, [pc, #156]	; (8000dd4 <StartTask01+0xfc>)
 8000d36:	f001 f80f 	bl	8001d58 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	4825      	ldr	r0, [pc, #148]	; (8000dd4 <StartTask01+0xfc>)
 8000d40:	f001 f80a 	bl	8001d58 <HAL_GPIO_WritePin>
 8000d44:	e7cc      	b.n	8000ce0 <StartTask01+0x8>
				} else {
					// If code length is not 4, it's an invalid code
					SSD1306_Puts("INVALID", &Font_11x18, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	4923      	ldr	r1, [pc, #140]	; (8000dd8 <StartTask01+0x100>)
 8000d4a:	4824      	ldr	r0, [pc, #144]	; (8000ddc <StartTask01+0x104>)
 8000d4c:	f000 fab4 	bl	80012b8 <SSD1306_Puts>
 8000d50:	e7c6      	b.n	8000ce0 <StartTask01+0x8>
				}
			} else {
				// If the system is armed, disarm it if the entered code matches
				if (strncmp(code, enteredUserCode, 4) == 0) {
 8000d52:	2204      	movs	r2, #4
 8000d54:	491d      	ldr	r1, [pc, #116]	; (8000dcc <StartTask01+0xf4>)
 8000d56:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <StartTask01+0xf8>)
 8000d58:	f005 fd50 	bl	80067fc <strncmp>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <StartTask01+0xa6>
					armed = 0;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <StartTask01+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <StartTask01+0xfc>)
 8000d6e:	f000 fff3 	bl	8001d58 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2104      	movs	r1, #4
 8000d76:	4817      	ldr	r0, [pc, #92]	; (8000dd4 <StartTask01+0xfc>)
 8000d78:	f000 ffee 	bl	8001d58 <HAL_GPIO_WritePin>
 8000d7c:	e7b0      	b.n	8000ce0 <StartTask01+0x8>
				} else {
					// If code doesn't match, it's an invalid code
					SSD1306_Puts("INVALID", &Font_11x18, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4915      	ldr	r1, [pc, #84]	; (8000dd8 <StartTask01+0x100>)
 8000d82:	4816      	ldr	r0, [pc, #88]	; (8000ddc <StartTask01+0x104>)
 8000d84:	f000 fa98 	bl	80012b8 <SSD1306_Puts>
 8000d88:	e7aa      	b.n	8000ce0 <StartTask01+0x8>
				}
			}

		} else {
			// Collect keys to form the entered code
			if (codeLength < 4) {
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <StartTask01+0xf0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	dc0b      	bgt.n	8000daa <StartTask01+0xd2>
				enteredUserCode[codeLength] = key;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <StartTask01+0xf0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <StartTask01+0xe8>)
 8000d98:	7811      	ldrb	r1, [r2, #0]
 8000d9a:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <StartTask01+0xf4>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
				codeLength++;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <StartTask01+0xf0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <StartTask01+0xf0>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e79a      	b.n	8000ce0 <StartTask01+0x8>
			} else {
				// If more than 4 keys are entered, reset the code.
				memset(enteredUserCode, 0, sizeof(enteredUserCode));
 8000daa:	2205      	movs	r2, #5
 8000dac:	2100      	movs	r1, #0
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <StartTask01+0xf4>)
 8000db0:	f005 fd1c 	bl	80067ec <memset>
				codeLength = 0;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <StartTask01+0xf0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
		osDelay(1);
 8000dba:	e791      	b.n	8000ce0 <StartTask01+0x8>
 8000dbc:	20000344 	.word	0x20000344
 8000dc0:	20000040 	.word	0x20000040
 8000dc4:	20000010 	.word	0x20000010
 8000dc8:	20000354 	.word	0x20000354
 8000dcc:	2000034c 	.word	0x2000034c
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	0800694c 	.word	0x0800694c

08000de0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f003 f9b2 	bl	8004152 <osDelay>

	  osMutexWait(displayMutexHandleHandle, osWaitForever);
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <StartTask02+0x88>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f04f 31ff 	mov.w	r1, #4294967295
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 f9d8 	bl	80041ac <osMutexWait>
	  SSD1306_Clear();
 8000dfc:	f000 fa81 	bl	8001302 <SSD1306_Clear>
	  SSD1306_GotoXY(0, 0);
 8000e00:	2100      	movs	r1, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f9c2 	bl	800118c <SSD1306_GotoXY>
	  SSD1306_Puts("Enter Code:", &Font_11x18, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4918      	ldr	r1, [pc, #96]	; (8000e6c <StartTask02+0x8c>)
 8000e0c:	4818      	ldr	r0, [pc, #96]	; (8000e70 <StartTask02+0x90>)
 8000e0e:	f000 fa53 	bl	80012b8 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 30);
 8000e12:	211e      	movs	r1, #30
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 f9b9 	bl	800118c <SSD1306_GotoXY>

	  char displayCode[5];
	  for (int i = 0; i < codeLength; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e008      	b.n	8000e32 <StartTask02+0x52>
	  {
		displayCode[i] = '*';
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	4413      	add	r3, r2
 8000e28:	222a      	movs	r2, #42	; 0x2a
 8000e2a:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < codeLength; i++)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <StartTask02+0x94>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <StartTask02+0x40>
	  }
	  displayCode[codeLength] = '\0';
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <StartTask02+0x94>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3318      	adds	r3, #24
 8000e42:	443b      	add	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	f803 2c0c 	strb.w	r2, [r3, #-12]

	  SSD1306_Puts(displayCode, &Font_11x18, 1);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4906      	ldr	r1, [pc, #24]	; (8000e6c <StartTask02+0x8c>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fa30 	bl	80012b8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000e58:	f000 f8f2 	bl	8001040 <SSD1306_UpdateScreen>
	  osMutexRelease(displayMutexHandleHandle);
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <StartTask02+0x88>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 f9f1 	bl	8004248 <osMutexRelease>
  {
 8000e66:	e7bf      	b.n	8000de8 <StartTask02+0x8>
 8000e68:	20000348 	.word	0x20000348
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	080068ac 	.word	0x080068ac
 8000e74:	20000354 	.word	0x20000354

08000e78 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f003 f966 	bl	8004152 <osDelay>
 8000e86:	e7fb      	b.n	8000e80 <StartTask03+0x8>

08000e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9a:	f000 fc8b 	bl	80017b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40001000 	.word	0x40001000

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000ebe:	f000 fa29 	bl	8001314 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ec2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2178      	movs	r1, #120	; 0x78
 8000eca:	485b      	ldr	r0, [pc, #364]	; (8001038 <SSD1306_Init+0x180>)
 8000ecc:	f001 f9ba 	bl	8002244 <HAL_I2C_IsDeviceReady>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e0a9      	b.n	800102e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000eda:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ede:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ee0:	e002      	b.n	8000ee8 <SSD1306_Init+0x30>
		p--;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f9      	bne.n	8000ee2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000eee:	22ae      	movs	r2, #174	; 0xae
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2078      	movs	r0, #120	; 0x78
 8000ef4:	f000 fa8a 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000ef8:	2220      	movs	r2, #32
 8000efa:	2100      	movs	r1, #0
 8000efc:	2078      	movs	r0, #120	; 0x78
 8000efe:	f000 fa85 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f02:	2210      	movs	r2, #16
 8000f04:	2100      	movs	r1, #0
 8000f06:	2078      	movs	r0, #120	; 0x78
 8000f08:	f000 fa80 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f0c:	22b0      	movs	r2, #176	; 0xb0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2078      	movs	r0, #120	; 0x78
 8000f12:	f000 fa7b 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f16:	22c8      	movs	r2, #200	; 0xc8
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2078      	movs	r0, #120	; 0x78
 8000f1c:	f000 fa76 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2078      	movs	r0, #120	; 0x78
 8000f26:	f000 fa71 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2078      	movs	r0, #120	; 0x78
 8000f30:	f000 fa6c 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	2100      	movs	r1, #0
 8000f38:	2078      	movs	r0, #120	; 0x78
 8000f3a:	f000 fa67 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f3e:	2281      	movs	r2, #129	; 0x81
 8000f40:	2100      	movs	r1, #0
 8000f42:	2078      	movs	r0, #120	; 0x78
 8000f44:	f000 fa62 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2078      	movs	r0, #120	; 0x78
 8000f4e:	f000 fa5d 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f52:	22a1      	movs	r2, #161	; 0xa1
 8000f54:	2100      	movs	r1, #0
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f000 fa58 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f5c:	22a6      	movs	r2, #166	; 0xa6
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2078      	movs	r0, #120	; 0x78
 8000f62:	f000 fa53 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f66:	22a8      	movs	r2, #168	; 0xa8
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f000 fa4e 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f70:	223f      	movs	r2, #63	; 0x3f
 8000f72:	2100      	movs	r1, #0
 8000f74:	2078      	movs	r0, #120	; 0x78
 8000f76:	f000 fa49 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f7a:	22a4      	movs	r2, #164	; 0xa4
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2078      	movs	r0, #120	; 0x78
 8000f80:	f000 fa44 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f84:	22d3      	movs	r2, #211	; 0xd3
 8000f86:	2100      	movs	r1, #0
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f000 fa3f 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f000 fa3a 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f98:	22d5      	movs	r2, #213	; 0xd5
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2078      	movs	r0, #120	; 0x78
 8000f9e:	f000 fa35 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000fa2:	22f0      	movs	r2, #240	; 0xf0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2078      	movs	r0, #120	; 0x78
 8000fa8:	f000 fa30 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000fac:	22d9      	movs	r2, #217	; 0xd9
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2078      	movs	r0, #120	; 0x78
 8000fb2:	f000 fa2b 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000fb6:	2222      	movs	r2, #34	; 0x22
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f000 fa26 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000fc0:	22da      	movs	r2, #218	; 0xda
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2078      	movs	r0, #120	; 0x78
 8000fc6:	f000 fa21 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000fca:	2212      	movs	r2, #18
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	; 0x78
 8000fd0:	f000 fa1c 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000fd4:	22db      	movs	r2, #219	; 0xdb
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	; 0x78
 8000fda:	f000 fa17 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000fde:	2220      	movs	r2, #32
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	; 0x78
 8000fe4:	f000 fa12 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000fe8:	228d      	movs	r2, #141	; 0x8d
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	; 0x78
 8000fee:	f000 fa0d 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000ff2:	2214      	movs	r2, #20
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	; 0x78
 8000ff8:	f000 fa08 	bl	800140c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ffc:	22af      	movs	r2, #175	; 0xaf
 8000ffe:	2100      	movs	r1, #0
 8001000:	2078      	movs	r0, #120	; 0x78
 8001002:	f000 fa03 	bl	800140c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001006:	222e      	movs	r2, #46	; 0x2e
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	; 0x78
 800100c:	f000 f9fe 	bl	800140c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 f843 	bl	800109c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001016:	f000 f813 	bl	8001040 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <SSD1306_Init+0x184>)
 800101c:	2200      	movs	r2, #0
 800101e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SSD1306_Init+0x184>)
 8001022:	2200      	movs	r2, #0
 8001024:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SSD1306_Init+0x184>)
 8001028:	2201      	movs	r2, #1
 800102a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000298 	.word	0x20000298
 800103c:	20000758 	.word	0x20000758

08001040 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	e01d      	b.n	8001088 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	3b50      	subs	r3, #80	; 0x50
 8001050:	b2db      	uxtb	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 f9d8 	bl	800140c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	; 0x78
 8001062:	f000 f9d3 	bl	800140c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001066:	2210      	movs	r2, #16
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	; 0x78
 800106c:	f000 f9ce 	bl	800140c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	01db      	lsls	r3, r3, #7
 8001074:	4a08      	ldr	r2, [pc, #32]	; (8001098 <SSD1306_UpdateScreen+0x58>)
 8001076:	441a      	add	r2, r3
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	2078      	movs	r0, #120	; 0x78
 800107e:	f000 f95f 	bl	8001340 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	3301      	adds	r3, #1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b07      	cmp	r3, #7
 800108c:	d9de      	bls.n	800104c <SSD1306_UpdateScreen+0xc>
	}
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000358 	.word	0x20000358

0800109c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <SSD1306_Fill+0x14>
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <SSD1306_Fill+0x16>
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b6:	4619      	mov	r1, r3
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SSD1306_Fill+0x2c>)
 80010ba:	f005 fb97 	bl	80067ec <memset>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000358 	.word	0x20000358

080010cc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	460b      	mov	r3, r1
 80010d8:	80bb      	strh	r3, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	70fb      	strb	r3, [r7, #3]
	if (
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	2b7f      	cmp	r3, #127	; 0x7f
 80010e2:	d848      	bhi.n	8001176 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	2b3f      	cmp	r3, #63	; 0x3f
 80010e8:	d845      	bhi.n	8001176 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <SSD1306_DrawPixel+0xb8>)
 80010ec:	791b      	ldrb	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d11a      	bne.n	800113c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001106:	88fa      	ldrh	r2, [r7, #6]
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	b298      	uxth	r0, r3
 800110e:	4603      	mov	r3, r0
 8001110:	01db      	lsls	r3, r3, #7
 8001112:	4413      	add	r3, r2
 8001114:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <SSD1306_DrawPixel+0xbc>)
 8001116:	5cd3      	ldrb	r3, [r2, r3]
 8001118:	b25a      	sxtb	r2, r3
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	2101      	movs	r1, #1
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	b25b      	sxtb	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b259      	sxtb	r1, r3
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	4603      	mov	r3, r0
 8001130:	01db      	lsls	r3, r3, #7
 8001132:	4413      	add	r3, r2
 8001134:	b2c9      	uxtb	r1, r1
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <SSD1306_DrawPixel+0xbc>)
 8001138:	54d1      	strb	r1, [r2, r3]
 800113a:	e01d      	b.n	8001178 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800113c:	88fa      	ldrh	r2, [r7, #6]
 800113e:	88bb      	ldrh	r3, [r7, #4]
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	b298      	uxth	r0, r3
 8001144:	4603      	mov	r3, r0
 8001146:	01db      	lsls	r3, r3, #7
 8001148:	4413      	add	r3, r2
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <SSD1306_DrawPixel+0xbc>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	b25a      	sxtb	r2, r3
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	b25b      	sxtb	r3, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4013      	ands	r3, r2
 8001164:	b259      	sxtb	r1, r3
 8001166:	88fa      	ldrh	r2, [r7, #6]
 8001168:	4603      	mov	r3, r0
 800116a:	01db      	lsls	r3, r3, #7
 800116c:	4413      	add	r3, r2
 800116e:	b2c9      	uxtb	r1, r1
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <SSD1306_DrawPixel+0xbc>)
 8001172:	54d1      	strb	r1, [r2, r3]
 8001174:	e000      	b.n	8001178 <SSD1306_DrawPixel+0xac>
		return;
 8001176:	bf00      	nop
	}
}
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000758 	.word	0x20000758
 8001188:	20000358 	.word	0x20000358

0800118c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	80fb      	strh	r3, [r7, #6]
 8001198:	4613      	mov	r3, r2
 800119a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SSD1306_GotoXY+0x28>)
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <SSD1306_GotoXY+0x28>)
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	8053      	strh	r3, [r2, #2]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	20000758 	.word	0x20000758

080011b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <SSD1306_Putc+0xfc>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
	if (
 80011d4:	2b7f      	cmp	r3, #127	; 0x7f
 80011d6:	dc07      	bgt.n	80011e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <SSD1306_Putc+0xfc>)
 80011da:	885b      	ldrh	r3, [r3, #2]
 80011dc:	461a      	mov	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011e4:	2b3f      	cmp	r3, #63	; 0x3f
 80011e6:	dd01      	ble.n	80011ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e05e      	b.n	80012aa <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e04b      	b.n	800128a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	3b20      	subs	r3, #32
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	7849      	ldrb	r1, [r1, #1]
 80011fe:	fb01 f303 	mul.w	r3, r1, r3
 8001202:	4619      	mov	r1, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	440b      	add	r3, r1
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	e030      	b.n	8001278 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d010      	beq.n	8001248 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <SSD1306_Putc+0xfc>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	b29b      	uxth	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b298      	uxth	r0, r3
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SSD1306_Putc+0xfc>)
 8001234:	885a      	ldrh	r2, [r3, #2]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	b29b      	uxth	r3, r3
 800123e:	79ba      	ldrb	r2, [r7, #6]
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff ff43 	bl	80010cc <SSD1306_DrawPixel>
 8001246:	e014      	b.n	8001272 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <SSD1306_Putc+0xfc>)
 800124a:	881a      	ldrh	r2, [r3, #0]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4413      	add	r3, r2
 8001252:	b298      	uxth	r0, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <SSD1306_Putc+0xfc>)
 8001256:	885a      	ldrh	r2, [r3, #2]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4413      	add	r3, r2
 800125e:	b299      	uxth	r1, r3
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf0c      	ite	eq
 8001266:	2301      	moveq	r3, #1
 8001268:	2300      	movne	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	f7ff ff2d 	bl	80010cc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	3301      	adds	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4293      	cmp	r3, r2
 8001282:	d3c8      	bcc.n	8001216 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	461a      	mov	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4293      	cmp	r3, r2
 8001294:	d3ad      	bcc.n	80011f2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <SSD1306_Putc+0xfc>)
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <SSD1306_Putc+0xfc>)
 80012a6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000758 	.word	0x20000758

080012b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	4613      	mov	r3, r2
 80012c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80012c6:	e012      	b.n	80012ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	79fa      	ldrb	r2, [r7, #7]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff71 	bl	80011b8 <SSD1306_Putc>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d002      	beq.n	80012e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	e008      	b.n	80012fa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e8      	bne.n	80012c8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	781b      	ldrb	r3, [r3, #0]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fec8 	bl	800109c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800130c:	f7ff fe98 	bl	8001040 <SSD1306_UpdateScreen>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <ssd1306_I2C_Init+0x28>)
 800131c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800131e:	e002      	b.n	8001326 <ssd1306_I2C_Init+0x12>
		p--;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f9      	bne.n	8001320 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	0003d090 	.word	0x0003d090

08001340 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b0c7      	sub	sp, #284	; 0x11c
 8001344:	af02      	add	r7, sp, #8
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800134e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001352:	600a      	str	r2, [r1, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800135a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800135e:	4622      	mov	r2, r4
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001366:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800136a:	4602      	mov	r2, r0
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001372:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001376:	460a      	mov	r2, r1
 8001378:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800137a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800137e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001382:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001386:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001394:	e015      	b.n	80013c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001396:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800139a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800139e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	441a      	add	r2, r3
 80013a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013aa:	3301      	adds	r3, #1
 80013ac:	7811      	ldrb	r1, [r2, #0]
 80013ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013b2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80013b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80013b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013bc:	3301      	adds	r3, #1
 80013be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d8df      	bhi.n	8001396 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80013d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b299      	uxth	r1, r3
 80013e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	f107 020c 	add.w	r2, r7, #12
 80013f4:	200a      	movs	r0, #10
 80013f6:	9000      	str	r0, [sp, #0]
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <ssd1306_I2C_WriteMulti+0xc8>)
 80013fa:	f000 fe25 	bl	8002048 <HAL_I2C_Master_Transmit>
}
 80013fe:	bf00      	nop
 8001400:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	20000298 	.word	0x20000298

0800140c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	460b      	mov	r3, r1
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	4613      	mov	r3, r2
 800141c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001422:	797b      	ldrb	r3, [r7, #5]
 8001424:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	b299      	uxth	r1, r3
 800142a:	f107 020c 	add.w	r2, r7, #12
 800142e:	230a      	movs	r3, #10
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2302      	movs	r3, #2
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <ssd1306_I2C_Write+0x38>)
 8001436:	f000 fe07 	bl	8002048 <HAL_I2C_Master_Transmit>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000298 	.word	0x20000298

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_MspInit+0x54>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a11      	ldr	r2, [pc, #68]	; (800149c <HAL_MspInit+0x54>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_MspInit+0x54>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_MspInit+0x54>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_MspInit+0x54>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_MspInit+0x54>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	210f      	movs	r1, #15
 800148a:	f06f 0001 	mvn.w	r0, #1
 800148e:	f000 fa8d 	bl	80019ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_I2C_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12c      	bne.n	800151c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_I2C_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_I2C_MspInit+0x88>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_I2C_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e4:	2312      	movs	r3, #18
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f0:	2304      	movs	r3, #4
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <HAL_I2C_MspInit+0x8c>)
 80014fc:	f000 fa80 	bl	8001a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_I2C_MspInit+0x88>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HAL_I2C_MspInit+0x88>)
 800150a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150e:	6413      	str	r3, [r2, #64]	; 0x40
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_I2C_MspInit+0x88>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40005400 	.word	0x40005400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12b      	bne.n	80015aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x88>)
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800158a:	230c      	movs	r3, #12
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159a:	2307      	movs	r3, #7
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0x8c>)
 80015a6:	f000 fa2b 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_InitTick+0xe4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <HAL_InitTick+0xe4>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_InitTick+0xe4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ec:	f107 0210 	add.w	r2, r7, #16
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fac8 	bl	8002b8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001606:	f001 fa99 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 800160a:	6378      	str	r0, [r7, #52]	; 0x34
 800160c:	e004      	b.n	8001618 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800160e:	f001 fa95 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8001612:	4603      	mov	r3, r0
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161a:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <HAL_InitTick+0xe8>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	3b01      	subs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_InitTick+0xec>)
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_InitTick+0xf0>)
 800162a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_InitTick+0xec>)
 800162e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001632:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_InitTick+0xec>)
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_InitTick+0xec>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_InitTick+0xec>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_InitTick+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <HAL_InitTick+0xec>)
 800164e:	f001 ff9d 	bl	800358c <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800165c:	2b00      	cmp	r3, #0
 800165e:	d11b      	bne.n	8001698 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <HAL_InitTick+0xec>)
 8001662:	f001 ffed 	bl	8003640 <HAL_TIM_Base_Start_IT>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800166c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001674:	2036      	movs	r0, #54	; 0x36
 8001676:	f000 f9b5 	bl	80019e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d808      	bhi.n	8001692 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	2036      	movs	r0, #54	; 0x36
 8001686:	f000 f991 	bl	80019ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_InitTick+0xf4>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e002      	b.n	8001698 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800169c:	4618      	mov	r0, r3
 800169e:	3738      	adds	r7, #56	; 0x38
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	20000760 	.word	0x20000760
 80016b0:	40001000 	.word	0x40001000
 80016b4:	20000018 	.word	0x20000018

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM6_DAC_IRQHandler+0x10>)
 80016ea:	f002 f819 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000760 	.word	0x20000760

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001720:	f7ff ffea 	bl	80016f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001726:	490d      	ldr	r1, [pc, #52]	; (800175c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800173c:	4c0a      	ldr	r4, [pc, #40]	; (8001768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800174a:	f005 f869 	bl	8006820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff f8ab 	bl	80008a8 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001760:	080076e0 	.word	0x080076e0
  ldr r2, =_sbss
 8001764:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001768:	20004500 	.word	0x20004500

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f8fc 	bl	8001996 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff ff0e 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fe50 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000001c 	.word	0x2000001c
 80017d8:	200007a8 	.word	0x200007a8

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	200007a8 	.word	0x200007a8

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffde 	bl	80017dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000001c 	.word	0x2000001c

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff4c 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019be:	f7ff ff61 	bl	8001884 <__NVIC_GetPriorityGrouping>
 80019c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f7ff ffb1 	bl	8001930 <NVIC_EncodePriority>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff80 	bl	80018dc <__NVIC_SetPriority>
}
 80019dc:	bf00      	nop
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff54 	bl	80018a0 <__NVIC_EnableIRQ>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e165      	b.n	8001ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8154 	bne.w	8001ce2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80ae 	beq.w	8001ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_GPIO_Init+0x300>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a5c      	ldr	r2, [pc, #368]	; (8001d00 <HAL_GPIO_Init+0x300>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <HAL_GPIO_Init+0x300>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4f      	ldr	r2, [pc, #316]	; (8001d08 <HAL_GPIO_Init+0x308>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x21a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4e      	ldr	r2, [pc, #312]	; (8001d0c <HAL_GPIO_Init+0x30c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x216>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4d      	ldr	r2, [pc, #308]	; (8001d10 <HAL_GPIO_Init+0x310>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x212>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <HAL_GPIO_Init+0x314>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_GPIO_Init+0x318>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x20a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x31c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x206>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_GPIO_Init+0x320>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x202>
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e00c      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e00a      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c06:	2305      	movs	r3, #5
 8001c08:	e008      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e004      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f002 0203 	and.w	r2, r2, #3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4093      	lsls	r3, r2
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c2c:	4935      	ldr	r1, [pc, #212]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5e:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	f67f ae96 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40013800 	.word	0x40013800
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020c00 	.word	0x40020c00
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40021400 	.word	0x40021400
 8001d20:	40021800 	.word	0x40021800
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9c:	887a      	ldrh	r2, [r7, #2]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	041a      	lsls	r2, r3, #16
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	400b      	ands	r3, r1
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e12b      	b.n	800202a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fb5a 	bl	80014a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e24:	f000 fe8a 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8001e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a81      	ldr	r2, [pc, #516]	; (8002034 <HAL_I2C_Init+0x274>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d807      	bhi.n	8001e44 <HAL_I2C_Init+0x84>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a80      	ldr	r2, [pc, #512]	; (8002038 <HAL_I2C_Init+0x278>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e006      	b.n	8001e52 <HAL_I2C_Init+0x92>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a7d      	ldr	r2, [pc, #500]	; (800203c <HAL_I2C_Init+0x27c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	bf94      	ite	ls
 8001e4c:	2301      	movls	r3, #1
 8001e4e:	2300      	movhi	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0e7      	b.n	800202a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a78      	ldr	r2, [pc, #480]	; (8002040 <HAL_I2C_Init+0x280>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0c9b      	lsrs	r3, r3, #18
 8001e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a6a      	ldr	r2, [pc, #424]	; (8002034 <HAL_I2C_Init+0x274>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d802      	bhi.n	8001e94 <HAL_I2C_Init+0xd4>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3301      	adds	r3, #1
 8001e92:	e009      	b.n	8001ea8 <HAL_I2C_Init+0xe8>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	4a69      	ldr	r2, [pc, #420]	; (8002044 <HAL_I2C_Init+0x284>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	495c      	ldr	r1, [pc, #368]	; (8002034 <HAL_I2C_Init+0x274>)
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d819      	bhi.n	8001efc <HAL_I2C_Init+0x13c>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e59      	subs	r1, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed6:	1c59      	adds	r1, r3, #1
 8001ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001edc:	400b      	ands	r3, r1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_I2C_Init+0x138>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e59      	subs	r1, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	e051      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e04f      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d111      	bne.n	8001f28 <HAL_I2C_Init+0x168>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e012      	b.n	8001f4e <HAL_I2C_Init+0x18e>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	0099      	lsls	r1, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Init+0x196>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e022      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10e      	bne.n	8001f7c <HAL_I2C_Init+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1e58      	subs	r0, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	440b      	add	r3, r1
 8001f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	e00f      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1e58      	subs	r0, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	0099      	lsls	r1, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	6809      	ldr	r1, [r1, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6911      	ldr	r1, [r2, #16]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68d2      	ldr	r2, [r2, #12]
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	000186a0 	.word	0x000186a0
 8002038:	001e847f 	.word	0x001e847f
 800203c:	003d08ff 	.word	0x003d08ff
 8002040:	431bde83 	.word	0x431bde83
 8002044:	10624dd3 	.word	0x10624dd3

08002048 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	461a      	mov	r2, r3
 8002054:	460b      	mov	r3, r1
 8002056:	817b      	strh	r3, [r7, #10]
 8002058:	4613      	mov	r3, r2
 800205a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff fbbe 	bl	80017dc <HAL_GetTick>
 8002060:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	f040 80e0 	bne.w	8002230 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2319      	movs	r3, #25
 8002076:	2201      	movs	r2, #1
 8002078:	4970      	ldr	r1, [pc, #448]	; (800223c <HAL_I2C_Master_Transmit+0x1f4>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fa92 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
 8002088:	e0d3      	b.n	8002232 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_I2C_Master_Transmit+0x50>
 8002094:	2302      	movs	r3, #2
 8002096:	e0cc      	b.n	8002232 <HAL_I2C_Master_Transmit+0x1ea>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d007      	beq.n	80020be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2221      	movs	r2, #33	; 0x21
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2210      	movs	r2, #16
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	893a      	ldrh	r2, [r7, #8]
 80020ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4a50      	ldr	r2, [pc, #320]	; (8002240 <HAL_I2C_Master_Transmit+0x1f8>)
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002100:	8979      	ldrh	r1, [r7, #10]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f9ca 	bl	80024a0 <I2C_MasterRequestWrite>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e08d      	b.n	8002232 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800212c:	e066      	b.n	80021fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	6a39      	ldr	r1, [r7, #32]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fb50 	bl	80027d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b04      	cmp	r3, #4
 8002144:	d107      	bne.n	8002156 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06b      	b.n	8002232 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11b      	bne.n	80021d0 <HAL_I2C_Master_Transmit+0x188>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d017      	beq.n	80021d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	6a39      	ldr	r1, [r7, #32]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fb47 	bl	8002868 <I2C_WaitOnBTFFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d107      	bne.n	80021f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e01a      	b.n	8002232 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d194      	bne.n	800212e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e000      	b.n	8002232 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002230:	2302      	movs	r3, #2
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	00100002 	.word	0x00100002
 8002240:	ffff0000 	.word	0xffff0000

08002244 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fac2 	bl	80017dc <HAL_GetTick>
 8002258:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b20      	cmp	r3, #32
 8002268:	f040 8111 	bne.w	800248e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	4988      	ldr	r1, [pc, #544]	; (8002498 <HAL_I2C_IsDeviceReady+0x254>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f994 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	e104      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_I2C_IsDeviceReady+0x50>
 8002290:	2302      	movs	r3, #2
 8002292:	e0fd      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x24c>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d007      	beq.n	80022ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2224      	movs	r2, #36	; 0x24
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a70      	ldr	r2, [pc, #448]	; (800249c <HAL_I2C_IsDeviceReady+0x258>)
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f952 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00d      	beq.n	8002322 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002314:	d103      	bne.n	800231e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0b6      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002330:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002332:	f7ff fa53 	bl	80017dc <HAL_GetTick>
 8002336:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b02      	cmp	r3, #2
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002366:	e025      	b.n	80023b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002368:	f7ff fa38 	bl	80017dc <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d302      	bcc.n	800237e <HAL_I2C_IsDeviceReady+0x13a>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	22a0      	movs	r2, #160	; 0xa0
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2ba0      	cmp	r3, #160	; 0xa0
 80023be:	d005      	beq.n	80023cc <HAL_I2C_IsDeviceReady+0x188>
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_I2C_IsDeviceReady+0x188>
 80023c6:	7dbb      	ldrb	r3, [r7, #22]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0cd      	beq.n	8002368 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d129      	bne.n	8002436 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2319      	movs	r3, #25
 800240e:	2201      	movs	r2, #1
 8002410:	4921      	ldr	r1, [pc, #132]	; (8002498 <HAL_I2C_IsDeviceReady+0x254>)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8c6 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e036      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e02c      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002444:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800244e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2319      	movs	r3, #25
 8002456:	2201      	movs	r2, #1
 8002458:	490f      	ldr	r1, [pc, #60]	; (8002498 <HAL_I2C_IsDeviceReady+0x254>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f8a2 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e012      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	3301      	adds	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	f4ff af32 	bcc.w	80022de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	00100002 	.word	0x00100002
 800249c:	ffff0000 	.word	0xffff0000

080024a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	460b      	mov	r3, r1
 80024ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d006      	beq.n	80024ca <I2C_MasterRequestWrite+0x2a>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d003      	beq.n	80024ca <I2C_MasterRequestWrite+0x2a>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024c8:	d108      	bne.n	80024dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e00b      	b.n	80024f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b12      	cmp	r3, #18
 80024e2:	d107      	bne.n	80024f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f84f 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251a:	d103      	bne.n	8002524 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e035      	b.n	8002594 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002530:	d108      	bne.n	8002544 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002532:	897b      	ldrh	r3, [r7, #10]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002540:	611a      	str	r2, [r3, #16]
 8002542:	e01b      	b.n	800257c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002544:	897b      	ldrh	r3, [r7, #10]
 8002546:	11db      	asrs	r3, r3, #7
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0306 	and.w	r3, r3, #6
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f063 030f 	orn	r3, r3, #15
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	490e      	ldr	r1, [pc, #56]	; (800259c <I2C_MasterRequestWrite+0xfc>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f898 	bl	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e010      	b.n	8002594 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <I2C_MasterRequestWrite+0x100>)
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f888 	bl	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	00010008 	.word	0x00010008
 80025a0:	00010002 	.word	0x00010002

080025a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	e048      	b.n	8002648 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d044      	beq.n	8002648 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7ff f90d 	bl	80017dc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d139      	bne.n	8002648 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	0c1b      	lsrs	r3, r3, #16
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d10d      	bne.n	80025fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	43da      	mvns	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4013      	ands	r3, r2
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	e00c      	b.n	8002614 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	43da      	mvns	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	429a      	cmp	r2, r3
 8002618:	d116      	bne.n	8002648 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e023      	b.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10d      	bne.n	800266e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	43da      	mvns	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	e00c      	b.n	8002688 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	43da      	mvns	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	4013      	ands	r3, r2
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	429a      	cmp	r2, r3
 800268c:	d093      	beq.n	80025b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a6:	e071      	b.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b6:	d123      	bne.n	8002700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e067      	b.n	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d041      	beq.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002708:	f7ff f868 	bl	80017dc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	d302      	bcc.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d136      	bne.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10c      	bne.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4013      	ands	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e00b      	b.n	800275a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e021      	b.n	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10c      	bne.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	43da      	mvns	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	e00b      	b.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4013      	ands	r3, r2
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f47f af6d 	bne.w	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e4:	e034      	b.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f886 	bl	80028f8 <I2C_IsAcknowledgeFailed>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e034      	b.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d028      	beq.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe ffed 	bl	80017dc <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11d      	bne.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d016      	beq.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e007      	b.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d1c3      	bne.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002874:	e034      	b.n	80028e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f83e 	bl	80028f8 <I2C_IsAcknowledgeFailed>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e034      	b.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d028      	beq.n	80028e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7fe ffa5 	bl	80017dc <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d016      	beq.n	80028e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e007      	b.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d1c3      	bne.n	8002876 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290e:	d11b      	bne.n	8002948 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002918:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cc      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d90c      	bls.n	8002994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d044      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e067      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4934      	ldr	r1, [pc, #208]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fec8 	bl	80017dc <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fec4 	bl	80017dc <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20c      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f887 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fd5e 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	080076b8 	.word	0x080076b8
 8002b1c:	20000014 	.word	0x20000014
 8002b20:	20000018 	.word	0x20000018

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000014 	.word	0x20000014

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	080076c8 	.word	0x080076c8

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f7ff ffdc 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	080076c8 	.word	0x080076c8

08002b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	220f      	movs	r2, #15
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_RCC_GetClockConfig+0x60>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40023c00 	.word	0x40023c00

08002bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b0ae      	sub	sp, #184	; 0xb8
 8002bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c16:	4bcb      	ldr	r3, [pc, #812]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	f200 8206 	bhi.w	8003030 <HAL_RCC_GetSysClockFreq+0x440>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08003031 	.word	0x08003031
 8002c34:	08003031 	.word	0x08003031
 8002c38:	08003031 	.word	0x08003031
 8002c3c:	08002c69 	.word	0x08002c69
 8002c40:	08003031 	.word	0x08003031
 8002c44:	08003031 	.word	0x08003031
 8002c48:	08003031 	.word	0x08003031
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08003031 	.word	0x08003031
 8002c54:	08003031 	.word	0x08003031
 8002c58:	08003031 	.word	0x08003031
 8002c5c:	08002e61 	.word	0x08002e61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4bb9      	ldr	r3, [pc, #740]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c66:	e1e7      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c68:	4bb8      	ldr	r3, [pc, #736]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c6e:	e1e3      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c70:	4bb4      	ldr	r3, [pc, #720]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7c:	4bb1      	ldr	r3, [pc, #708]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d071      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c88:	4bae      	ldr	r3, [pc, #696]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	0159      	lsls	r1, r3, #5
 8002cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc0:	0150      	lsls	r0, r2, #5
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	1a51      	subs	r1, r2, r1
 8002cca:	6439      	str	r1, [r7, #64]	; 0x40
 8002ccc:	4629      	mov	r1, r5
 8002cce:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cea:	4641      	mov	r1, r8
 8002cec:	018a      	lsls	r2, r1, #6
 8002cee:	4641      	mov	r1, r8
 8002cf0:	1a51      	subs	r1, r2, r1
 8002cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d08:	4649      	mov	r1, r9
 8002d0a:	00cb      	lsls	r3, r1, #3
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d12:	4641      	mov	r1, r8
 8002d14:	00ca      	lsls	r2, r1, #3
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
 8002d22:	462b      	mov	r3, r5
 8002d24:	460a      	mov	r2, r1
 8002d26:	eb42 0303 	adc.w	r3, r2, r3
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d38:	4629      	mov	r1, r5
 8002d3a:	024b      	lsls	r3, r1, #9
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d42:	4621      	mov	r1, r4
 8002d44:	024a      	lsls	r2, r1, #9
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d5c:	f7fd fa58 	bl	8000210 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d6a:	e067      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d86:	2300      	movs	r3, #0
 8002d88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d8e:	4622      	mov	r2, r4
 8002d90:	462b      	mov	r3, r5
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da0:	0150      	lsls	r0, r2, #5
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4621      	mov	r1, r4
 8002da8:	1a51      	subs	r1, r2, r1
 8002daa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dac:	4629      	mov	r1, r5
 8002dae:	eb63 0301 	sbc.w	r3, r3, r1
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	018b      	lsls	r3, r1, #6
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dca:	4641      	mov	r1, r8
 8002dcc:	018a      	lsls	r2, r1, #6
 8002dce:	4641      	mov	r1, r8
 8002dd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002de6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dee:	4692      	mov	sl, r2
 8002df0:	469b      	mov	fp, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	eb1a 0303 	adds.w	r3, sl, r3
 8002df8:	623b      	str	r3, [r7, #32]
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	028b      	lsls	r3, r1, #10
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e18:	4621      	mov	r1, r4
 8002e1a:	028a      	lsls	r2, r1, #10
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e24:	2200      	movs	r2, #0
 8002e26:	673b      	str	r3, [r7, #112]	; 0x70
 8002e28:	677a      	str	r2, [r7, #116]	; 0x74
 8002e2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e2e:	f7fd f9ef 	bl	8000210 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4613      	mov	r3, r2
 8002e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e3c:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e5e:	e0eb      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d06b      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002e90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e94:	4622      	mov	r2, r4
 8002e96:	462b      	mov	r3, r5
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	0159      	lsls	r1, r3, #5
 8002ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea6:	0150      	lsls	r0, r2, #5
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4621      	mov	r1, r4
 8002eae:	1a51      	subs	r1, r2, r1
 8002eb0:	61b9      	str	r1, [r7, #24]
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ec6:	4659      	mov	r1, fp
 8002ec8:	018b      	lsls	r3, r1, #6
 8002eca:	4651      	mov	r1, sl
 8002ecc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	018a      	lsls	r2, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ebb2 0801 	subs.w	r8, r2, r1
 8002eda:	4659      	mov	r1, fp
 8002edc:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef4:	4690      	mov	r8, r2
 8002ef6:	4699      	mov	r9, r3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	eb18 0303 	adds.w	r3, r8, r3
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	462b      	mov	r3, r5
 8002f02:	eb49 0303 	adc.w	r3, r9, r3
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f14:	4629      	mov	r1, r5
 8002f16:	024b      	lsls	r3, r1, #9
 8002f18:	4621      	mov	r1, r4
 8002f1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1e:	4621      	mov	r1, r4
 8002f20:	024a      	lsls	r2, r1, #9
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f34:	f7fd f96c 	bl	8000210 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f42:	e065      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x420>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f60:	653b      	str	r3, [r7, #80]	; 0x50
 8002f62:	2300      	movs	r3, #0
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
 8002f66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f6a:	4642      	mov	r2, r8
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	f04f 0000 	mov.w	r0, #0
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7c:	0150      	lsls	r0, r2, #5
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4641      	mov	r1, r8
 8002f84:	1a51      	subs	r1, r2, r1
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	4649      	mov	r1, r9
 8002f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	018b      	lsls	r3, r1, #6
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa6:	4651      	mov	r1, sl
 8002fa8:	018a      	lsls	r2, r1, #6
 8002faa:	4651      	mov	r1, sl
 8002fac:	1a54      	subs	r4, r2, r1
 8002fae:	4659      	mov	r1, fp
 8002fb0:	eb63 0501 	sbc.w	r5, r3, r1
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	00eb      	lsls	r3, r5, #3
 8002fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc2:	00e2      	lsls	r2, r4, #3
 8002fc4:	4614      	mov	r4, r2
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	4643      	mov	r3, r8
 8002fca:	18e3      	adds	r3, r4, r3
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	464b      	mov	r3, r9
 8002fd0:	eb45 0303 	adc.w	r3, r5, r3
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	028b      	lsls	r3, r1, #10
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fec:	4621      	mov	r1, r4
 8002fee:	028a      	lsls	r2, r1, #10
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ffe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003002:	f7fd f905 	bl	8000210 <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4613      	mov	r3, r2
 800300c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_RCC_GetSysClockFreq+0x458>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0f1b      	lsrs	r3, r3, #28
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800301e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800302e:	e003      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003036:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800303c:	4618      	mov	r0, r3
 800303e:	37b8      	adds	r7, #184	; 0xb8
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	00f42400 	.word	0x00f42400

08003050 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e28d      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8083 	beq.w	8003176 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003070:	4b94      	ldr	r3, [pc, #592]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d019      	beq.n	80030b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800307c:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003084:	2b08      	cmp	r3, #8
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003088:	4b8e      	ldr	r3, [pc, #568]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05b      	beq.n	8003174 <HAL_RCC_OscConfig+0x124>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d157      	bne.n	8003174 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e25a      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x90>
 80030d2:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7b      	ldr	r2, [pc, #492]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xcc>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0xb4>
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a75      	ldr	r2, [pc, #468]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b73      	ldr	r3, [pc, #460]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a72      	ldr	r2, [pc, #456]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xcc>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6b      	ldr	r2, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fb5a 	bl	80017dc <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe fb56 	bl	80017dc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e21f      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xdc>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fb46 	bl	80017dc <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe fb42 	bl	80017dc <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e20b      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x104>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d06f      	beq.n	8003262 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003182:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003196:	2b08      	cmp	r3, #8
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x186>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1d3      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4937      	ldr	r1, [pc, #220]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e03a      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_RCC_OscConfig+0x278>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fe faef 	bl	80017dc <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003202:	f7fe faeb 	bl	80017dc <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e1b4      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4925      	ldr	r1, [pc, #148]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
 8003234:	e015      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_OscConfig+0x278>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe face 	bl	80017dc <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe faca 	bl	80017dc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e193      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe faae 	bl	80017dc <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe faaa 	bl	80017dc <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e173      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x234>
 80032a2:	e01b      	b.n	80032dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_OscConfig+0x27c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe fa97 	bl	80017dc <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	e00e      	b.n	80032d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe fa93 	bl	80017dc <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d907      	bls.n	80032d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e15c      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000
 80032cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b8a      	ldr	r3, [pc, #552]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ea      	bne.n	80032b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8097 	beq.w	8003418 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b83      	ldr	r3, [pc, #524]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a7e      	ldr	r2, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b79      	ldr	r3, [pc, #484]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d118      	bne.n	8003358 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003332:	f7fe fa53 	bl	80017dc <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fe fa4f 	bl	80017dc <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e118      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x31e>
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	e01c      	b.n	80033a8 <HAL_RCC_OscConfig+0x358>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b05      	cmp	r3, #5
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x340>
 8003376:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a60      	ldr	r2, [pc, #384]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
 8003382:	4b5e      	ldr	r3, [pc, #376]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a5d      	ldr	r2, [pc, #372]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0x358>
 8003390:	4b5a      	ldr	r3, [pc, #360]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a59      	ldr	r2, [pc, #356]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	4b57      	ldr	r3, [pc, #348]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a56      	ldr	r2, [pc, #344]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	f023 0304 	bic.w	r3, r3, #4
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe fa14 	bl	80017dc <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe fa10 	bl	80017dc <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0d7      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RCC_OscConfig+0x368>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe f9fe 	bl	80017dc <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe f9fa 	bl	80017dc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0c1      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	4b40      	ldr	r3, [pc, #256]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1ee      	bne.n	80033e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340c:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	4a3a      	ldr	r2, [pc, #232]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80ad 	beq.w	800357c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d060      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d145      	bne.n	80034c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_RCC_OscConfig+0x4b4>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe f9ce 	bl	80017dc <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe f9ca 	bl	80017dc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e093      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	071b      	lsls	r3, r3, #28
 800348e:	491b      	ldr	r1, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4b4>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe f99f 	bl	80017dc <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe f99b 	bl	80017dc <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e064      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x452>
 80034c0:	e05c      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_RCC_OscConfig+0x4b4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f988 	bl	80017dc <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe f984 	bl	80017dc <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e04d      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x480>
 80034ee:	e045      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e040      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000
 8003504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <HAL_RCC_OscConfig+0x538>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d030      	beq.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d129      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d122      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800353e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003540:	4293      	cmp	r3, r2
 8003542:	d119      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	3b01      	subs	r3, #1
 8003552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d10f      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 f9c0 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04e      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_TIM_Base_Start_IT+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d01d      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <HAL_TIM_Base_Start_IT+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_TIM_Base_Start_IT+0xcc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_TIM_Base_Start_IT+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_TIM_Base_Start_IT+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_TIM_Base_Start_IT+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_TIM_Base_Start_IT+0xdc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d010      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	e007      	b.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8d2 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8c4 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8d5 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8ac 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f89e 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f8af 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01b      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f886 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f878 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f889 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2208      	movs	r2, #8
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f860 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f852 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f863 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fafe 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f906 	bl	8003abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f834 	bl	800393c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0220 	mvn.w	r2, #32
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8d8 	bl	8003aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <TIM_Base_SetConfig+0x12c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d00f      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <TIM_Base_SetConfig+0x130>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a42      	ldr	r2, [pc, #264]	; (8003a84 <TIM_Base_SetConfig+0x134>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a41      	ldr	r2, [pc, #260]	; (8003a88 <TIM_Base_SetConfig+0x138>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <TIM_Base_SetConfig+0x13c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a35      	ldr	r2, [pc, #212]	; (8003a7c <TIM_Base_SetConfig+0x12c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b0:	d027      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <TIM_Base_SetConfig+0x130>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d023      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <TIM_Base_SetConfig+0x134>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01f      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <TIM_Base_SetConfig+0x138>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <TIM_Base_SetConfig+0x13c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d017      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <TIM_Base_SetConfig+0x140>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <TIM_Base_SetConfig+0x144>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00f      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <TIM_Base_SetConfig+0x148>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <TIM_Base_SetConfig+0x14c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <TIM_Base_SetConfig+0x150>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <TIM_Base_SetConfig+0x154>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a10      	ldr	r2, [pc, #64]	; (8003a7c <TIM_Base_SetConfig+0x12c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0xf8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <TIM_Base_SetConfig+0x13c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d103      	bne.n	8003a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	40001800 	.word	0x40001800
 8003aa0:	40001c00 	.word	0x40001c00
 8003aa4:	40002000 	.word	0x40002000

08003aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e042      	b.n	8003b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd fd1a 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	; 0x24
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f82b 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b74:	b0c0      	sub	sp, #256	; 0x100
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	68d9      	ldr	r1, [r3, #12]
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	ea40 0301 	orr.w	r3, r0, r1
 8003b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bc8:	f021 010c 	bic.w	r1, r1, #12
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	6999      	ldr	r1, [r3, #24]
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	ea40 0301 	orr.w	r3, r0, r1
 8003bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b8f      	ldr	r3, [pc, #572]	; (8003e3c <UART_SetConfig+0x2cc>)
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d005      	beq.n	8003c10 <UART_SetConfig+0xa0>
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b8d      	ldr	r3, [pc, #564]	; (8003e40 <UART_SetConfig+0x2d0>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d104      	bne.n	8003c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe ffa8 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8003c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c18:	e003      	b.n	8003c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c1a:	f7fe ff8f 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2c:	f040 810c 	bne.w	8003e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c42:	4622      	mov	r2, r4
 8003c44:	462b      	mov	r3, r5
 8003c46:	1891      	adds	r1, r2, r2
 8003c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c4a:	415b      	adcs	r3, r3
 8003c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c52:	4621      	mov	r1, r4
 8003c54:	eb12 0801 	adds.w	r8, r2, r1
 8003c58:	4629      	mov	r1, r5
 8003c5a:	eb43 0901 	adc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c80:	462b      	mov	r3, r5
 8003c82:	eb49 0303 	adc.w	r3, r9, r3
 8003c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	18db      	adds	r3, r3, r3
 8003ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	eb42 0303 	adc.w	r3, r2, r3
 8003caa:	657b      	str	r3, [r7, #84]	; 0x54
 8003cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cb4:	f7fc faac 	bl	8000210 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	011c      	lsls	r4, r3, #4
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ce8:	4641      	mov	r1, r8
 8003cea:	eb12 0a01 	adds.w	sl, r2, r1
 8003cee:	4649      	mov	r1, r9
 8003cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d08:	4692      	mov	sl, r2
 8003d0a:	469b      	mov	fp, r3
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d16:	464b      	mov	r3, r9
 8003d18:	eb4b 0303 	adc.w	r3, fp, r3
 8003d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d34:	460b      	mov	r3, r1
 8003d36:	18db      	adds	r3, r3, r3
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
 8003d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d4a:	f7fc fa61 	bl	8000210 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003d56:	fba3 2301 	umull	r2, r3, r3, r1
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2264      	movs	r2, #100	; 0x64
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	1acb      	subs	r3, r1, r3
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d78:	441c      	add	r4, r3
 8003d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	1891      	adds	r1, r2, r2
 8003d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d94:	415b      	adcs	r3, r3
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	1851      	adds	r1, r2, r1
 8003da0:	6339      	str	r1, [r7, #48]	; 0x30
 8003da2:	4649      	mov	r1, r9
 8003da4:	414b      	adcs	r3, r1
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003db4:	4659      	mov	r1, fp
 8003db6:	00cb      	lsls	r3, r1, #3
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	00ca      	lsls	r2, r1, #3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4642      	mov	r2, r8
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	eb42 0303 	adc.w	r3, r2, r3
 8003dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003df0:	460b      	mov	r3, r1
 8003df2:	18db      	adds	r3, r3, r3
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	4613      	mov	r3, r2
 8003df8:	eb42 0303 	adc.w	r3, r2, r3
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e06:	f7fc fa03 	bl	8000210 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003e10:	fba3 1302 	umull	r1, r3, r3, r2
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	2164      	movs	r1, #100	; 0x64
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	3332      	adds	r3, #50	; 0x32
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	f003 0207 	and.w	r2, r3, #7
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4422      	add	r2, r4
 8003e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e38:	e106      	b.n	8004048 <UART_SetConfig+0x4d8>
 8003e3a:	bf00      	nop
 8003e3c:	40011000 	.word	0x40011000
 8003e40:	40011400 	.word	0x40011400
 8003e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	1891      	adds	r1, r2, r2
 8003e60:	6239      	str	r1, [r7, #32]
 8003e62:	415b      	adcs	r3, r3
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	1854      	adds	r4, r2, r1
 8003e6e:	4649      	mov	r1, r9
 8003e70:	eb43 0501 	adc.w	r5, r3, r1
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	00eb      	lsls	r3, r5, #3
 8003e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e82:	00e2      	lsls	r2, r4, #3
 8003e84:	4614      	mov	r4, r2
 8003e86:	461d      	mov	r5, r3
 8003e88:	4643      	mov	r3, r8
 8003e8a:	18e3      	adds	r3, r4, r3
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e90:	464b      	mov	r3, r9
 8003e92:	eb45 0303 	adc.w	r3, r5, r3
 8003e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	008b      	lsls	r3, r1, #2
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	008a      	lsls	r2, r1, #2
 8003ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ec8:	f7fc f9a2 	bl	8000210 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4b60      	ldr	r3, [pc, #384]	; (8004054 <UART_SetConfig+0x4e4>)
 8003ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	011c      	lsls	r4, r3, #4
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	61b9      	str	r1, [r7, #24]
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efc:	4641      	mov	r1, r8
 8003efe:	1851      	adds	r1, r2, r1
 8003f00:	6139      	str	r1, [r7, #16]
 8003f02:	4649      	mov	r1, r9
 8003f04:	414b      	adcs	r3, r1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f14:	4659      	mov	r1, fp
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4651      	mov	r1, sl
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f30:	464b      	mov	r3, r9
 8003f32:	460a      	mov	r2, r1
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f54:	4649      	mov	r1, r9
 8003f56:	008b      	lsls	r3, r1, #2
 8003f58:	4641      	mov	r1, r8
 8003f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5e:	4641      	mov	r1, r8
 8003f60:	008a      	lsls	r2, r1, #2
 8003f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f66:	f7fc f953 	bl	8000210 <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <UART_SetConfig+0x4e4>)
 8003f72:	fba3 2301 	umull	r2, r3, r3, r1
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2264      	movs	r2, #100	; 0x64
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	1acb      	subs	r3, r1, r3
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	3332      	adds	r3, #50	; 0x32
 8003f84:	4a33      	ldr	r2, [pc, #204]	; (8004054 <UART_SetConfig+0x4e4>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f90:	441c      	add	r4, r3
 8003f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f96:	2200      	movs	r2, #0
 8003f98:	673b      	str	r3, [r7, #112]	; 0x70
 8003f9a:	677a      	str	r2, [r7, #116]	; 0x74
 8003f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	1891      	adds	r1, r2, r2
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	415b      	adcs	r3, r3
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	1851      	adds	r1, r2, r1
 8003fb4:	6039      	str	r1, [r7, #0]
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	414b      	adcs	r3, r1
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	00cb      	lsls	r3, r1, #3
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	00ca      	lsls	r2, r1, #3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	eb42 0303 	adc.w	r3, r2, r3
 8003fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff6:	667a      	str	r2, [r7, #100]	; 0x64
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004004:	4649      	mov	r1, r9
 8004006:	008b      	lsls	r3, r1, #2
 8004008:	4641      	mov	r1, r8
 800400a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400e:	4641      	mov	r1, r8
 8004010:	008a      	lsls	r2, r1, #2
 8004012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004016:	f7fc f8fb 	bl	8000210 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <UART_SetConfig+0x4e4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a08      	ldr	r2, [pc, #32]	; (8004054 <UART_SetConfig+0x4e4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4422      	add	r2, r4
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004054:	51eb851f 	.word	0x51eb851f

08004058 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800406a:	2b84      	cmp	r3, #132	; 0x84
 800406c:	d005      	beq.n	800407a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800406e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	3303      	adds	r3, #3
 8004078:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800408e:	f3ef 8305 	mrs	r3, IPSR
 8004092:	607b      	str	r3, [r7, #4]
  return(result);
 8004094:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80040b0:	f001 f942 	bl	8005338 <vTaskStartScheduler>
  
  return osOK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	bd80      	pop	{r7, pc}

080040ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040bc:	b089      	sub	sp, #36	; 0x24
 80040be:	af04      	add	r7, sp, #16
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <osThreadCreate+0x54>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01c      	beq.n	800410e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685c      	ldr	r4, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691e      	ldr	r6, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ffb6 	bl	8004058 <makeFreeRtosPriority>
 80040ec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f6:	9202      	str	r2, [sp, #8]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	9100      	str	r1, [sp, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4632      	mov	r2, r6
 8004100:	4629      	mov	r1, r5
 8004102:	4620      	mov	r0, r4
 8004104:	f000 ff50 	bl	8004fa8 <xTaskCreateStatic>
 8004108:	4603      	mov	r3, r0
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e01c      	b.n	8004148 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685c      	ldr	r4, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800411a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff98 	bl	8004058 <makeFreeRtosPriority>
 8004128:	4602      	mov	r2, r0
 800412a:	f107 030c 	add.w	r3, r7, #12
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	9200      	str	r2, [sp, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	4632      	mov	r2, r6
 8004136:	4629      	mov	r1, r5
 8004138:	4620      	mov	r0, r4
 800413a:	f000 ff92 	bl	8005062 <xTaskCreate>
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d001      	beq.n	8004148 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004148:	68fb      	ldr	r3, [r7, #12]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004152 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <osDelay+0x16>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	e000      	b.n	800416a <osDelay+0x18>
 8004168:	2301      	movs	r3, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f8b0 	bl	80052d0 <vTaskDelay>
  
  return osOK;
 8004170:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4619      	mov	r1, r3
 8004190:	2001      	movs	r0, #1
 8004192:	f000 faae 	bl	80046f2 <xQueueCreateMutexStatic>
 8004196:	4603      	mov	r3, r0
 8004198:	e003      	b.n	80041a2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800419a:	2001      	movs	r0, #1
 800419c:	f000 fa91 	bl	80046c2 <xQueueCreateMutex>
 80041a0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <osMutexWait+0x18>
    return osErrorParameter;
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	e03a      	b.n	800423a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d103      	bne.n	80041d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e009      	b.n	80041ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <osMutexWait+0x40>
      ticks = 1;
 80041e8:	2301      	movs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80041ec:	f7ff ff4c 	bl	8004088 <inHandlerMode>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d017      	beq.n	8004226 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80041f6:	f107 0308 	add.w	r3, r7, #8
 80041fa:	461a      	mov	r2, r3
 80041fc:	2100      	movs	r1, #0
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fd2a 	bl	8004c58 <xQueueReceiveFromISR>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d001      	beq.n	800420e <osMutexWait+0x62>
      return osErrorOS;
 800420a:	23ff      	movs	r3, #255	; 0xff
 800420c:	e015      	b.n	800423a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d011      	beq.n	8004238 <osMutexWait+0x8c>
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <osMutexWait+0x98>)
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	e008      	b.n	8004238 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fc09 	bl	8004a40 <xQueueSemaphoreTake>
 800422e:	4603      	mov	r3, r0
 8004230:	2b01      	cmp	r3, #1
 8004232:	d001      	beq.n	8004238 <osMutexWait+0x8c>
    return osErrorOS;
 8004234:	23ff      	movs	r3, #255	; 0xff
 8004236:	e000      	b.n	800423a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004258:	f7ff ff16 	bl	8004088 <inHandlerMode>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb5b 	bl	8004924 <xQueueGiveFromISR>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <osMutexRelease+0x30>
      return osErrorOS;
 8004274:	23ff      	movs	r3, #255	; 0xff
 8004276:	e017      	b.n	80042a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d013      	beq.n	80042a6 <osMutexRelease+0x5e>
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <osMutexRelease+0x68>)
 8004280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	e00a      	b.n	80042a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004290:	2300      	movs	r3, #0
 8004292:	2200      	movs	r2, #0
 8004294:	2100      	movs	r1, #0
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa46 	bl	8004728 <xQueueGenericSend>
 800429c:	4603      	mov	r3, r0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d001      	beq.n	80042a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80042a2:	23ff      	movs	r3, #255	; 0xff
 80042a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f103 0208 	add.w	r2, r3, #8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f103 0208 	add.w	r2, r3, #8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 0208 	add.w	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d103      	bne.n	8004376 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e00c      	b.n	8004390 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3308      	adds	r3, #8
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e002      	b.n	8004384 <vListInsert+0x2e>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	d2f6      	bcs.n	800437e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6852      	ldr	r2, [r2, #4]
 80043e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d103      	bne.n	80043fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1e5a      	subs	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004446:	f001 fec5 	bl	80061d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	441a      	add	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	3b01      	subs	r3, #1
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	441a      	add	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	22ff      	movs	r2, #255	; 0xff
 800448a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	22ff      	movs	r2, #255	; 0xff
 8004492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d114      	bne.n	80044c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01a      	beq.n	80044da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3310      	adds	r3, #16
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 f987 	bl	80057bc <xTaskRemoveFromEventList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <xQueueGenericReset+0xcc>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	e009      	b.n	80044da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3310      	adds	r3, #16
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fef2 	bl	80042b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3324      	adds	r3, #36	; 0x24
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff feed 	bl	80042b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044da:	f001 feab 	bl	8006234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044de:	2301      	movs	r3, #1
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08e      	sub	sp, #56	; 0x38
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <xQueueGenericCreateStatic+0x52>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <xQueueGenericCreateStatic+0x56>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <xQueueGenericCreateStatic+0x58>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	623b      	str	r3, [r7, #32]
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <xQueueGenericCreateStatic+0x7e>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <xQueueGenericCreateStatic+0x82>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <xQueueGenericCreateStatic+0x84>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	61fb      	str	r3, [r7, #28]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800458a:	2348      	movs	r3, #72	; 0x48
 800458c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b48      	cmp	r3, #72	; 0x48
 8004592:	d00a      	beq.n	80045aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	61bb      	str	r3, [r7, #24]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f83f 	bl	8004650 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3730      	adds	r7, #48	; 0x30
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericCreate+0x2a>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	613b      	str	r3, [r7, #16]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	3348      	adds	r3, #72	; 0x48
 8004614:	4618      	mov	r0, r3
 8004616:	f001 feff 	bl	8006418 <pvPortMalloc>
 800461a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	3348      	adds	r3, #72	; 0x48
 800462a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004634:	79fa      	ldrb	r2, [r7, #7]
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4613      	mov	r3, r2
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f805 	bl	8004650 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004646:	69bb      	ldr	r3, [r7, #24]
	}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e002      	b.n	8004672 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800467e:	2101      	movs	r1, #1
 8004680:	69b8      	ldr	r0, [r7, #24]
 8004682:	f7ff fecb 	bl	800441c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80046ae:	2300      	movs	r3, #0
 80046b0:	2200      	movs	r2, #0
 80046b2:	2100      	movs	r1, #0
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f837 	bl	8004728 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046cc:	2301      	movs	r3, #1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	6978      	ldr	r0, [r7, #20]
 80046dc:	f7ff ff7e 	bl	80045dc <xQueueGenericCreate>
 80046e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff ffd3 	bl	800468e <prvInitialiseMutex>

		return xNewQueue;
 80046e8:	68fb      	ldr	r3, [r7, #12]
	}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b088      	sub	sp, #32
 80046f6:	af02      	add	r7, sp, #8
 80046f8:	4603      	mov	r3, r0
 80046fa:	6039      	str	r1, [r7, #0]
 80046fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046fe:	2301      	movs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	6939      	ldr	r1, [r7, #16]
 8004710:	6978      	ldr	r0, [r7, #20]
 8004712:	f7ff feeb 	bl	80044ec <xQueueGenericCreateStatic>
 8004716:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff ffb8 	bl	800468e <prvInitialiseMutex>

		return xNewQueue;
 800471e:	68fb      	ldr	r3, [r7, #12]
	}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	; 0x38
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004736:	2300      	movs	r3, #0
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueGenericSend+0x32>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <xQueueGenericSend+0x40>
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <xQueueGenericSend+0x44>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <xQueueGenericSend+0x46>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xQueueGenericSend+0x60>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d103      	bne.n	8004796 <xQueueGenericSend+0x6e>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <xQueueGenericSend+0x72>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericSend+0x74>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047b6:	f001 f9bd 	bl	8005b34 <xTaskGetSchedulerState>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <xQueueGenericSend+0x9e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <xQueueGenericSend+0xa2>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <xQueueGenericSend+0xa4>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	61fb      	str	r3, [r7, #28]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047e6:	f001 fcf5 	bl	80061d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <xQueueGenericSend+0xd4>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d129      	bne.n	8004850 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004802:	f000 fac1 	bl	8004d88 <prvCopyDataToQueue>
 8004806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d010      	beq.n	8004832 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	3324      	adds	r3, #36	; 0x24
 8004814:	4618      	mov	r0, r3
 8004816:	f000 ffd1 	bl	80057bc <xTaskRemoveFromEventList>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004820:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <xQueueGenericSend+0x1f8>)
 8004822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	e00a      	b.n	8004848 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004838:	4b39      	ldr	r3, [pc, #228]	; (8004920 <xQueueGenericSend+0x1f8>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004848:	f001 fcf4 	bl	8006234 <vPortExitCritical>
				return pdPASS;
 800484c:	2301      	movs	r3, #1
 800484e:	e063      	b.n	8004918 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004856:	f001 fced 	bl	8006234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800485a:	2300      	movs	r3, #0
 800485c:	e05c      	b.n	8004918 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f809 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004872:	f001 fcdf 	bl	8006234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004876:	f000 fdbf 	bl	80053f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800487a:	f001 fcab 	bl	80061d4 <vPortEnterCritical>
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004884:	b25b      	sxtb	r3, r3
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d103      	bne.n	8004894 <xQueueGenericSend+0x16c>
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSend+0x182>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048aa:	f001 fcc3 	bl	8006234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ae:	1d3a      	adds	r2, r7, #4
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fff8 	bl	80058ac <xTaskCheckForTimeOut>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d124      	bne.n	800490c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c4:	f000 fb58 	bl	8004f78 <prvIsQueueFull>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d018      	beq.n	8004900 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	3310      	adds	r3, #16
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 ff4c 	bl	8005774 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048de:	f000 fae3 	bl	8004ea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048e2:	f000 fd97 	bl	8005414 <xTaskResumeAll>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f af7c 	bne.w	80047e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <xQueueGenericSend+0x1f8>)
 80048f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	e772      	b.n	80047e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004902:	f000 fad1 	bl	8004ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004906:	f000 fd85 	bl	8005414 <xTaskResumeAll>
 800490a:	e76c      	b.n	80047e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800490c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490e:	f000 facb 	bl	8004ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004912:	f000 fd7f 	bl	8005414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004918:	4618      	mov	r0, r3
 800491a:	3738      	adds	r7, #56	; 0x38
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08e      	sub	sp, #56	; 0x38
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	623b      	str	r3, [r7, #32]
}
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	61fb      	str	r3, [r7, #28]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <xQueueGiveFromISR+0x58>
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <xQueueGiveFromISR+0x5c>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <xQueueGiveFromISR+0x5e>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	61bb      	str	r3, [r7, #24]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800499c:	f001 fcfc 	bl	8006398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049a0:	f3ef 8211 	mrs	r2, BASEPRI
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	617a      	str	r2, [r7, #20]
 80049b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d22b      	bcs.n	8004a24 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d112      	bne.n	8004a0e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	3324      	adds	r3, #36	; 0x24
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fee1 	bl	80057bc <xTaskRemoveFromEventList>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e007      	b.n	8004a1e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a12:	3301      	adds	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	b25a      	sxtb	r2, r3
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
 8004a22:	e001      	b.n	8004a28 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3738      	adds	r7, #56	; 0x38
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08e      	sub	sp, #56	; 0x38
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61fb      	str	r3, [r7, #28]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a90:	f001 f850 	bl	8005b34 <xTaskGetSchedulerState>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <xQueueSemaphoreTake+0x60>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <xQueueSemaphoreTake+0x64>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <xQueueSemaphoreTake+0x66>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	61bb      	str	r3, [r7, #24]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ac0:	f001 fb88 	bl	80061d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d024      	beq.n	8004b1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ae0:	f001 f9d0 	bl	8005e84 <pvTaskIncrementMutexHeldCount>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00f      	beq.n	8004b12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	3310      	adds	r3, #16
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fe60 	bl	80057bc <xTaskRemoveFromEventList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b02:	4b54      	ldr	r3, [pc, #336]	; (8004c54 <xQueueSemaphoreTake+0x214>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b12:	f001 fb8f 	bl	8006234 <vPortExitCritical>
				return pdPASS;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e097      	b.n	8004c4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d111      	bne.n	8004b44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	617b      	str	r3, [r7, #20]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b3c:	f001 fb7a 	bl	8006234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e082      	b.n	8004c4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b4a:	f107 030c 	add.w	r3, r7, #12
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fe96 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b58:	f001 fb6c 	bl	8006234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b5c:	f000 fc4c 	bl	80053f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b60:	f001 fb38 	bl	80061d4 <vPortEnterCritical>
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d103      	bne.n	8004b7a <xQueueSemaphoreTake+0x13a>
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d103      	bne.n	8004b90 <xQueueSemaphoreTake+0x150>
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	f001 fb50 	bl	8006234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b94:	463a      	mov	r2, r7
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe85 	bl	80058ac <xTaskCheckForTimeOut>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d132      	bne.n	8004c0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004baa:	f000 f9cf 	bl	8004f4c <prvIsQueueEmpty>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d026      	beq.n	8004c02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004bbc:	f001 fb0a 	bl	80061d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 ffd3 	bl	8005b70 <xTaskPriorityInherit>
 8004bca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bcc:	f001 fb32 	bl	8006234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	3324      	adds	r3, #36	; 0x24
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fdcb 	bl	8005774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004be0:	f000 f962 	bl	8004ea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004be4:	f000 fc16 	bl	8005414 <xTaskResumeAll>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f47f af68 	bne.w	8004ac0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004bf0:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <xQueueSemaphoreTake+0x214>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	e75e      	b.n	8004ac0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c04:	f000 f950 	bl	8004ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c08:	f000 fc04 	bl	8005414 <xTaskResumeAll>
 8004c0c:	e758      	b.n	8004ac0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c10:	f000 f94a 	bl	8004ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c14:	f000 fbfe 	bl	8005414 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c1a:	f000 f997 	bl	8004f4c <prvIsQueueEmpty>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f43f af4d 	beq.w	8004ac0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004c2c:	f001 fad2 	bl	80061d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c32:	f000 f891 	bl	8004d58 <prvGetDisinheritPriorityAfterTimeout>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f892 	bl	8005d68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c44:	f001 faf6 	bl	8006234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3738      	adds	r7, #56	; 0x38
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	; 0x38
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	623b      	str	r3, [r7, #32]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <xQueueReceiveFromISR+0x3a>
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <xQueueReceiveFromISR+0x3e>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <xQueueReceiveFromISR+0x40>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	61fb      	str	r3, [r7, #28]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cb2:	f001 fb71 	bl	8006398 <vPortValidateInterruptPriority>
	__asm volatile
 8004cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	61ba      	str	r2, [r7, #24]
 8004ccc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004cce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d02f      	beq.n	8004d3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cec:	f000 f8b6 	bl	8004e5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d112      	bne.n	8004d28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d016      	beq.n	8004d38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fd54 	bl	80057bc <xTaskRemoveFromEventList>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e007      	b.n	8004d38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	b25a      	sxtb	r2, r3
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3c:	e001      	b.n	8004d42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f383 8811 	msr	BASEPRI, r3
}
 8004d4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3738      	adds	r7, #56	; 0x38
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d006      	beq.n	8004d76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f1c3 0307 	rsb	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e001      	b.n	8004d7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d14d      	bne.n	8004e4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 ff52 	bl	8005c5c <xTaskPriorityDisinherit>
 8004db8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	e043      	b.n	8004e4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d119      	bne.n	8004dfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6858      	ldr	r0, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	f001 fd50 	bl	8006878 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	441a      	add	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d32b      	bcc.n	8004e4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	e026      	b.n	8004e4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68d8      	ldr	r0, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	461a      	mov	r2, r3
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	f001 fd36 	bl	8006878 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	425b      	negs	r3, r3
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d207      	bcs.n	8004e38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	425b      	negs	r3, r3
 8004e32:	441a      	add	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d105      	bne.n	8004e4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e52:	697b      	ldr	r3, [r7, #20]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	441a      	add	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d303      	bcc.n	8004e90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68d9      	ldr	r1, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6838      	ldr	r0, [r7, #0]
 8004e9c:	f001 fcec 	bl	8006878 <memcpy>
	}
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eb0:	f001 f990 	bl	80061d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ebc:	e011      	b.n	8004ee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d012      	beq.n	8004eec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3324      	adds	r3, #36	; 0x24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fc76 	bl	80057bc <xTaskRemoveFromEventList>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ed6:	f000 fd4b 	bl	8005970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	dce9      	bgt.n	8004ebe <prvUnlockQueue+0x16>
 8004eea:	e000      	b.n	8004eee <prvUnlockQueue+0x46>
					break;
 8004eec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	22ff      	movs	r2, #255	; 0xff
 8004ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ef6:	f001 f99d 	bl	8006234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004efa:	f001 f96b 	bl	80061d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f06:	e011      	b.n	8004f2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3310      	adds	r3, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fc51 	bl	80057bc <xTaskRemoveFromEventList>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f20:	f000 fd26 	bl	8005970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f24:	7bbb      	ldrb	r3, [r7, #14]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dce9      	bgt.n	8004f08 <prvUnlockQueue+0x60>
 8004f34:	e000      	b.n	8004f38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	22ff      	movs	r2, #255	; 0xff
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f40:	f001 f978 	bl	8006234 <vPortExitCritical>
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f54:	f001 f93e 	bl	80061d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e001      	b.n	8004f6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f6a:	f001 f963 	bl	8006234 <vPortExitCritical>

	return xReturn;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f80:	f001 f928 	bl	80061d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d102      	bne.n	8004f96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e001      	b.n	8004f9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f9a:	f001 f94b 	bl	8006234 <vPortExitCritical>

	return xReturn;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08e      	sub	sp, #56	; 0x38
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	623b      	str	r3, [r7, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xTaskCreateStatic+0x46>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	61fb      	str	r3, [r7, #28]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fee:	2354      	movs	r3, #84	; 0x54
 8004ff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b54      	cmp	r3, #84	; 0x54
 8004ff6:	d00a      	beq.n	800500e <xTaskCreateStatic+0x66>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	61bb      	str	r3, [r7, #24]
}
 800500a:	bf00      	nop
 800500c:	e7fe      	b.n	800500c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800500e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01e      	beq.n	8005054 <xTaskCreateStatic+0xac>
 8005016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01b      	beq.n	8005054 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005024:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	2202      	movs	r2, #2
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800502e:	2300      	movs	r3, #0
 8005030:	9303      	str	r3, [sp, #12]
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	9302      	str	r3, [sp, #8]
 8005036:	f107 0314 	add.w	r3, r7, #20
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f850 	bl	80050ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800504c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800504e:	f000 f8d5 	bl	80051fc <prvAddNewTaskToReadyList>
 8005052:	e001      	b.n	8005058 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005058:	697b      	ldr	r3, [r7, #20]
	}
 800505a:	4618      	mov	r0, r3
 800505c:	3728      	adds	r7, #40	; 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005062:	b580      	push	{r7, lr}
 8005064:	b08c      	sub	sp, #48	; 0x30
 8005066:	af04      	add	r7, sp, #16
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4618      	mov	r0, r3
 8005078:	f001 f9ce 	bl	8006418 <pvPortMalloc>
 800507c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00e      	beq.n	80050a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005084:	2054      	movs	r0, #84	; 0x54
 8005086:	f001 f9c7 	bl	8006418 <pvPortMalloc>
 800508a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
 8005098:	e005      	b.n	80050a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f001 fa88 	bl	80065b0 <vPortFree>
 80050a0:	e001      	b.n	80050a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d017      	beq.n	80050dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	2300      	movs	r3, #0
 80050b8:	9303      	str	r3, [sp, #12]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	9302      	str	r3, [sp, #8]
 80050be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f80e 	bl	80050ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050d0:	69f8      	ldr	r0, [r7, #28]
 80050d2:	f000 f893 	bl	80051fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050d6:	2301      	movs	r3, #1
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e002      	b.n	80050e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050e2:	69bb      	ldr	r3, [r7, #24]
	}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005104:	3b01      	subs	r3, #1
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <prvInitialiseNewTask+0x48>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	617b      	str	r3, [r7, #20]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01f      	beq.n	800517a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e012      	b.n	8005166 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	7819      	ldrb	r1, [r3, #0]
 8005148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	3334      	adds	r3, #52	; 0x34
 8005150:	460a      	mov	r2, r1
 8005152:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d006      	beq.n	800516e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	3301      	adds	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d9e9      	bls.n	8005140 <prvInitialiseNewTask+0x54>
 800516c:	e000      	b.n	8005170 <prvInitialiseNewTask+0x84>
			{
				break;
 800516e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005178:	e003      	b.n	8005182 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	2b06      	cmp	r3, #6
 8005186:	d901      	bls.n	800518c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005188:	2306      	movs	r3, #6
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005190:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005196:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	2200      	movs	r2, #0
 800519c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	3304      	adds	r3, #4
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff f8a6 	bl	80042f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	3318      	adds	r3, #24
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff f8a1 	bl	80042f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	f1c3 0207 	rsb	r2, r3, #7
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68f9      	ldr	r1, [r7, #12]
 80051da:	69b8      	ldr	r0, [r7, #24]
 80051dc:	f000 fecc 	bl	8005f78 <pxPortInitialiseStack>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051f2:	bf00      	nop
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005204:	f000 ffe6 	bl	80061d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005208:	4b2a      	ldr	r3, [pc, #168]	; (80052b4 <prvAddNewTaskToReadyList+0xb8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <prvAddNewTaskToReadyList+0xb8>)
 8005210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005212:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <prvAddNewTaskToReadyList+0xbc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800521a:	4a27      	ldr	r2, [pc, #156]	; (80052b8 <prvAddNewTaskToReadyList+0xbc>)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <prvAddNewTaskToReadyList+0xb8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d110      	bne.n	800524a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005228:	f000 fbc6 	bl	80059b8 <prvInitialiseTaskLists>
 800522c:	e00d      	b.n	800524a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800522e:	4b23      	ldr	r3, [pc, #140]	; (80052bc <prvAddNewTaskToReadyList+0xc0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <prvAddNewTaskToReadyList+0xbc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	429a      	cmp	r2, r3
 8005242:	d802      	bhi.n	800524a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <prvAddNewTaskToReadyList+0xbc>)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <prvAddNewTaskToReadyList+0xc4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3301      	adds	r3, #1
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <prvAddNewTaskToReadyList+0xc4>)
 8005252:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	2201      	movs	r2, #1
 800525a:	409a      	lsls	r2, r3
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <prvAddNewTaskToReadyList+0xc8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <prvAddNewTaskToReadyList+0xc8>)
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <prvAddNewTaskToReadyList+0xcc>)
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f7ff f846 	bl	800430e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005282:	f000 ffd7 	bl	8006234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <prvAddNewTaskToReadyList+0xc0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <prvAddNewTaskToReadyList+0xbc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	429a      	cmp	r2, r3
 800529a:	d207      	bcs.n	80052ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <prvAddNewTaskToReadyList+0xd0>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	200008ac 	.word	0x200008ac
 80052b8:	200007ac 	.word	0x200007ac
 80052bc:	200008b8 	.word	0x200008b8
 80052c0:	200008c8 	.word	0x200008c8
 80052c4:	200008b4 	.word	0x200008b4
 80052c8:	200007b0 	.word	0x200007b0
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d017      	beq.n	8005312 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052e2:	4b13      	ldr	r3, [pc, #76]	; (8005330 <vTaskDelay+0x60>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <vTaskDelay+0x30>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60bb      	str	r3, [r7, #8]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005300:	f000 f87a 	bl	80053f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005304:	2100      	movs	r1, #0
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fdd0 	bl	8005eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800530c:	f000 f882 	bl	8005414 <xTaskResumeAll>
 8005310:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d107      	bne.n	8005328 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <vTaskDelay+0x64>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	200008d4 	.word	0x200008d4
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005346:	463a      	mov	r2, r7
 8005348:	1d39      	adds	r1, r7, #4
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	4618      	mov	r0, r3
 8005350:	f7fb fa90 	bl	8000874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	9202      	str	r2, [sp, #8]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	2300      	movs	r3, #0
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	460a      	mov	r2, r1
 8005366:	491e      	ldr	r1, [pc, #120]	; (80053e0 <vTaskStartScheduler+0xa8>)
 8005368:	481e      	ldr	r0, [pc, #120]	; (80053e4 <vTaskStartScheduler+0xac>)
 800536a:	f7ff fe1d 	bl	8004fa8 <xTaskCreateStatic>
 800536e:	4603      	mov	r3, r0
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <vTaskStartScheduler+0xb0>)
 8005372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005374:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <vTaskStartScheduler+0xb0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e001      	b.n	8005386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d116      	bne.n	80053ba <vTaskStartScheduler+0x82>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	613b      	str	r3, [r7, #16]
}
 800539e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <vTaskStartScheduler+0xb4>)
 80053a2:	f04f 32ff 	mov.w	r2, #4294967295
 80053a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <vTaskStartScheduler+0xb8>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <vTaskStartScheduler+0xbc>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053b4:	f000 fe6c 	bl	8006090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053b8:	e00e      	b.n	80053d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d10a      	bne.n	80053d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	60fb      	str	r3, [r7, #12]
}
 80053d4:	bf00      	nop
 80053d6:	e7fe      	b.n	80053d6 <vTaskStartScheduler+0x9e>
}
 80053d8:	bf00      	nop
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	08006954 	.word	0x08006954
 80053e4:	08005989 	.word	0x08005989
 80053e8:	200008d0 	.word	0x200008d0
 80053ec:	200008cc 	.word	0x200008cc
 80053f0:	200008b8 	.word	0x200008b8
 80053f4:	200008b0 	.word	0x200008b0

080053f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <vTaskSuspendAll+0x18>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	4a03      	ldr	r2, [pc, #12]	; (8005410 <vTaskSuspendAll+0x18>)
 8005404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005406:	bf00      	nop
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	200008d4 	.word	0x200008d4

08005414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005422:	4b41      	ldr	r3, [pc, #260]	; (8005528 <xTaskResumeAll+0x114>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <xTaskResumeAll+0x2c>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	603b      	str	r3, [r7, #0]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005440:	f000 fec8 	bl	80061d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005444:	4b38      	ldr	r3, [pc, #224]	; (8005528 <xTaskResumeAll+0x114>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3b01      	subs	r3, #1
 800544a:	4a37      	ldr	r2, [pc, #220]	; (8005528 <xTaskResumeAll+0x114>)
 800544c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <xTaskResumeAll+0x114>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d161      	bne.n	800551a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005456:	4b35      	ldr	r3, [pc, #212]	; (800552c <xTaskResumeAll+0x118>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d05d      	beq.n	800551a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800545e:	e02e      	b.n	80054be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005460:	4b33      	ldr	r3, [pc, #204]	; (8005530 <xTaskResumeAll+0x11c>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3318      	adds	r3, #24
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe ffab 	bl	80043c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe ffa6 	bl	80043c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	2201      	movs	r2, #1
 8005482:	409a      	lsls	r2, r3
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <xTaskResumeAll+0x120>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4313      	orrs	r3, r2
 800548a:	4a2a      	ldr	r2, [pc, #168]	; (8005534 <xTaskResumeAll+0x120>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4a27      	ldr	r2, [pc, #156]	; (8005538 <xTaskResumeAll+0x124>)
 800549c:	441a      	add	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fe ff32 	bl	800430e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <xTaskResumeAll+0x128>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d302      	bcc.n	80054be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <xTaskResumeAll+0x12c>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054be:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <xTaskResumeAll+0x11c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1cc      	bne.n	8005460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054cc:	f000 fb12 	bl	8005af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054d0:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <xTaskResumeAll+0x130>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054dc:	f000 f836 	bl	800554c <xTaskIncrementTick>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <xTaskResumeAll+0x12c>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f1      	bne.n	80054dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <xTaskResumeAll+0x130>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <xTaskResumeAll+0x12c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005506:	2301      	movs	r3, #1
 8005508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <xTaskResumeAll+0x134>)
 800550c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800551a:	f000 fe8b 	bl	8006234 <vPortExitCritical>

	return xAlreadyYielded;
 800551e:	68bb      	ldr	r3, [r7, #8]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	200008d4 	.word	0x200008d4
 800552c:	200008ac 	.word	0x200008ac
 8005530:	2000086c 	.word	0x2000086c
 8005534:	200008b4 	.word	0x200008b4
 8005538:	200007b0 	.word	0x200007b0
 800553c:	200007ac 	.word	0x200007ac
 8005540:	200008c0 	.word	0x200008c0
 8005544:	200008bc 	.word	0x200008bc
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005556:	4b4e      	ldr	r3, [pc, #312]	; (8005690 <xTaskIncrementTick+0x144>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 808e 	bne.w	800567c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005560:	4b4c      	ldr	r3, [pc, #304]	; (8005694 <xTaskIncrementTick+0x148>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005568:	4a4a      	ldr	r2, [pc, #296]	; (8005694 <xTaskIncrementTick+0x148>)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d120      	bne.n	80055b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005574:	4b48      	ldr	r3, [pc, #288]	; (8005698 <xTaskIncrementTick+0x14c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <xTaskIncrementTick+0x48>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	603b      	str	r3, [r7, #0]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <xTaskIncrementTick+0x46>
 8005594:	4b40      	ldr	r3, [pc, #256]	; (8005698 <xTaskIncrementTick+0x14c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	4b40      	ldr	r3, [pc, #256]	; (800569c <xTaskIncrementTick+0x150>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3e      	ldr	r2, [pc, #248]	; (8005698 <xTaskIncrementTick+0x14c>)
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4a3e      	ldr	r2, [pc, #248]	; (800569c <xTaskIncrementTick+0x150>)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b3d      	ldr	r3, [pc, #244]	; (80056a0 <xTaskIncrementTick+0x154>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	4a3c      	ldr	r2, [pc, #240]	; (80056a0 <xTaskIncrementTick+0x154>)
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	f000 fa9f 	bl	8005af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055b6:	4b3b      	ldr	r3, [pc, #236]	; (80056a4 <xTaskIncrementTick+0x158>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d348      	bcc.n	8005652 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c0:	4b35      	ldr	r3, [pc, #212]	; (8005698 <xTaskIncrementTick+0x14c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ca:	4b36      	ldr	r3, [pc, #216]	; (80056a4 <xTaskIncrementTick+0x158>)
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295
 80055d0:	601a      	str	r2, [r3, #0]
					break;
 80055d2:	e03e      	b.n	8005652 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d4:	4b30      	ldr	r3, [pc, #192]	; (8005698 <xTaskIncrementTick+0x14c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d203      	bcs.n	80055f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ec:	4a2d      	ldr	r2, [pc, #180]	; (80056a4 <xTaskIncrementTick+0x158>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055f2:	e02e      	b.n	8005652 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe fee5 	bl	80043c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3318      	adds	r3, #24
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fedc 	bl	80043c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	2201      	movs	r2, #1
 8005616:	409a      	lsls	r2, r3
 8005618:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <xTaskIncrementTick+0x15c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <xTaskIncrementTick+0x15c>)
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4a1f      	ldr	r2, [pc, #124]	; (80056ac <xTaskIncrementTick+0x160>)
 8005630:	441a      	add	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fe fe68 	bl	800430e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005642:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <xTaskIncrementTick+0x164>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d3b9      	bcc.n	80055c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005650:	e7b6      	b.n	80055c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <xTaskIncrementTick+0x164>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4914      	ldr	r1, [pc, #80]	; (80056ac <xTaskIncrementTick+0x160>)
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d901      	bls.n	800566e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800566e:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <xTaskIncrementTick+0x168>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005676:	2301      	movs	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e004      	b.n	8005686 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800567c:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <xTaskIncrementTick+0x16c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <xTaskIncrementTick+0x16c>)
 8005684:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005686:	697b      	ldr	r3, [r7, #20]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200008d4 	.word	0x200008d4
 8005694:	200008b0 	.word	0x200008b0
 8005698:	20000864 	.word	0x20000864
 800569c:	20000868 	.word	0x20000868
 80056a0:	200008c4 	.word	0x200008c4
 80056a4:	200008cc 	.word	0x200008cc
 80056a8:	200008b4 	.word	0x200008b4
 80056ac:	200007b0 	.word	0x200007b0
 80056b0:	200007ac 	.word	0x200007ac
 80056b4:	200008c0 	.word	0x200008c0
 80056b8:	200008bc 	.word	0x200008bc

080056bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056c2:	4b27      	ldr	r3, [pc, #156]	; (8005760 <vTaskSwitchContext+0xa4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056ca:	4b26      	ldr	r3, [pc, #152]	; (8005764 <vTaskSwitchContext+0xa8>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056d0:	e03f      	b.n	8005752 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80056d2:	4b24      	ldr	r3, [pc, #144]	; (8005764 <vTaskSwitchContext+0xa8>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d8:	4b23      	ldr	r3, [pc, #140]	; (8005768 <vTaskSwitchContext+0xac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	fab3 f383 	clz	r3, r3
 80056e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	f1c3 031f 	rsb	r3, r3, #31
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	491f      	ldr	r1, [pc, #124]	; (800576c <vTaskSwitchContext+0xb0>)
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	607b      	str	r3, [r7, #4]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <vTaskSwitchContext+0x5a>
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <vTaskSwitchContext+0xb0>)
 8005724:	4413      	add	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	3308      	adds	r3, #8
 800573a:	429a      	cmp	r2, r3
 800573c:	d104      	bne.n	8005748 <vTaskSwitchContext+0x8c>
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	4a08      	ldr	r2, [pc, #32]	; (8005770 <vTaskSwitchContext+0xb4>)
 8005750:	6013      	str	r3, [r2, #0]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	200008d4 	.word	0x200008d4
 8005764:	200008c0 	.word	0x200008c0
 8005768:	200008b4 	.word	0x200008b4
 800576c:	200007b0 	.word	0x200007b0
 8005770:	200007ac 	.word	0x200007ac

08005774 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <vTaskPlaceOnEventList+0x44>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3318      	adds	r3, #24
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fe fdd7 	bl	8004356 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057a8:	2101      	movs	r1, #1
 80057aa:	6838      	ldr	r0, [r7, #0]
 80057ac:	f000 fb7e 	bl	8005eac <prvAddCurrentTaskToDelayedList>
}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	200007ac 	.word	0x200007ac

080057bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	60fb      	str	r3, [r7, #12]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3318      	adds	r3, #24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe fdeb 	bl	80043c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <xTaskRemoveFromEventList+0xac>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11c      	bne.n	8005834 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fde2 	bl	80043c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	2201      	movs	r2, #1
 800580a:	409a      	lsls	r2, r3
 800580c:	4b17      	ldr	r3, [pc, #92]	; (800586c <xTaskRemoveFromEventList+0xb0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4313      	orrs	r3, r2
 8005812:	4a16      	ldr	r2, [pc, #88]	; (800586c <xTaskRemoveFromEventList+0xb0>)
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4a13      	ldr	r2, [pc, #76]	; (8005870 <xTaskRemoveFromEventList+0xb4>)
 8005824:	441a      	add	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fe fd6e 	bl	800430e <vListInsertEnd>
 8005832:	e005      	b.n	8005840 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3318      	adds	r3, #24
 8005838:	4619      	mov	r1, r3
 800583a:	480e      	ldr	r0, [pc, #56]	; (8005874 <xTaskRemoveFromEventList+0xb8>)
 800583c:	f7fe fd67 	bl	800430e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <xTaskRemoveFromEventList+0xbc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	429a      	cmp	r2, r3
 800584c:	d905      	bls.n	800585a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <xTaskRemoveFromEventList+0xc0>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e001      	b.n	800585e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200008d4 	.word	0x200008d4
 800586c:	200008b4 	.word	0x200008b4
 8005870:	200007b0 	.word	0x200007b0
 8005874:	2000086c 	.word	0x2000086c
 8005878:	200007ac 	.word	0x200007ac
 800587c:	200008c0 	.word	0x200008c0

08005880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <vTaskInternalSetTimeOutState+0x24>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <vTaskInternalSetTimeOutState+0x28>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	200008c4 	.word	0x200008c4
 80058a8:	200008b0 	.word	0x200008b0

080058ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60fb      	str	r3, [r7, #12]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058ee:	f000 fc71 	bl	80061d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <xTaskCheckForTimeOut+0xbc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d102      	bne.n	8005912 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e023      	b.n	800595a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <xTaskCheckForTimeOut+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d007      	beq.n	800592e <xTaskCheckForTimeOut+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e015      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	429a      	cmp	r2, r3
 8005936:	d20b      	bcs.n	8005950 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff9b 	bl	8005880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	e004      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f000 fc6b 	bl	8006234 <vPortExitCritical>

	return xReturn;
 800595e:	69fb      	ldr	r3, [r7, #28]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	200008b0 	.word	0x200008b0
 800596c:	200008c4 	.word	0x200008c4

08005970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <vTaskMissedYield+0x14>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	200008c0 	.word	0x200008c0

08005988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005990:	f000 f852 	bl	8005a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005994:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <prvIdleTask+0x28>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d9f9      	bls.n	8005990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <prvIdleTask+0x2c>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059ac:	e7f0      	b.n	8005990 <prvIdleTask+0x8>
 80059ae:	bf00      	nop
 80059b0:	200007b0 	.word	0x200007b0
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	e00c      	b.n	80059de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <prvInitialiseTaskLists+0x60>)
 80059d0:	4413      	add	r3, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fc6e 	bl	80042b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3301      	adds	r3, #1
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d9ef      	bls.n	80059c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059e4:	480d      	ldr	r0, [pc, #52]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 80059e6:	f7fe fc65 	bl	80042b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ea:	480d      	ldr	r0, [pc, #52]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 80059ec:	f7fe fc62 	bl	80042b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059f0:	480c      	ldr	r0, [pc, #48]	; (8005a24 <prvInitialiseTaskLists+0x6c>)
 80059f2:	f7fe fc5f 	bl	80042b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059f6:	480c      	ldr	r0, [pc, #48]	; (8005a28 <prvInitialiseTaskLists+0x70>)
 80059f8:	f7fe fc5c 	bl	80042b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059fc:	480b      	ldr	r0, [pc, #44]	; (8005a2c <prvInitialiseTaskLists+0x74>)
 80059fe:	f7fe fc59 	bl	80042b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <prvInitialiseTaskLists+0x78>)
 8005a04:	4a05      	ldr	r2, [pc, #20]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 8005a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <prvInitialiseTaskLists+0x7c>)
 8005a0a:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 8005a0c:	601a      	str	r2, [r3, #0]
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	200007b0 	.word	0x200007b0
 8005a1c:	2000083c 	.word	0x2000083c
 8005a20:	20000850 	.word	0x20000850
 8005a24:	2000086c 	.word	0x2000086c
 8005a28:	20000880 	.word	0x20000880
 8005a2c:	20000898 	.word	0x20000898
 8005a30:	20000864 	.word	0x20000864
 8005a34:	20000868 	.word	0x20000868

08005a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a3e:	e019      	b.n	8005a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a40:	f000 fbc8 	bl	80061d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <prvCheckTasksWaitingTermination+0x50>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fcb9 	bl	80043c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a6a:	f000 fbe3 	bl	8006234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f810 	bl	8005a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e1      	bne.n	8005a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000880 	.word	0x20000880
 8005a8c:	200008ac 	.word	0x200008ac
 8005a90:	20000894 	.word	0x20000894

08005a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fd80 	bl	80065b0 <vPortFree>
				vPortFree( pxTCB );
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fd7d 	bl	80065b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab6:	e018      	b.n	8005aea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d103      	bne.n	8005aca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fd74 	bl	80065b0 <vPortFree>
	}
 8005ac8:	e00f      	b.n	8005aea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d00a      	beq.n	8005aea <prvDeleteTCB+0x56>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60fb      	str	r3, [r7, #12]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <prvDeleteTCB+0x54>
	}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b0c:	e008      	b.n	8005b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000864 	.word	0x20000864
 8005b30:	200008cc 	.word	0x200008cc

08005b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <xTaskGetSchedulerState+0x34>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b42:	2301      	movs	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e008      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <xTaskGetSchedulerState+0x38>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b50:	2302      	movs	r3, #2
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	e001      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b5a:	687b      	ldr	r3, [r7, #4]
	}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	200008b8 	.word	0x200008b8
 8005b6c:	200008d4 	.word	0x200008d4

08005b70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d05e      	beq.n	8005c44 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <xTaskPriorityInherit+0xe0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d24e      	bcs.n	8005c32 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db06      	blt.n	8005baa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9c:	4b2c      	ldr	r3, [pc, #176]	; (8005c50 <xTaskPriorityInherit+0xe0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	f1c3 0207 	rsb	r2, r3, #7
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6959      	ldr	r1, [r3, #20]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <xTaskPriorityInherit+0xe4>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	d12f      	bne.n	8005c22 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe fbfe 	bl	80043c8 <uxListRemove>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43da      	mvns	r2, r3
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <xTaskPriorityInherit+0xe8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4013      	ands	r3, r2
 8005be4:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <xTaskPriorityInherit+0xe8>)
 8005be6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005be8:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <xTaskPriorityInherit+0xe0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	409a      	lsls	r2, r3
 8005bfa:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <xTaskPriorityInherit+0xe8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <xTaskPriorityInherit+0xe8>)
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4a10      	ldr	r2, [pc, #64]	; (8005c54 <xTaskPriorityInherit+0xe4>)
 8005c12:	441a      	add	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f7fe fb77 	bl	800430e <vListInsertEnd>
 8005c20:	e004      	b.n	8005c2c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <xTaskPriorityInherit+0xe0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e008      	b.n	8005c44 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <xTaskPriorityInherit+0xe0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d201      	bcs.n	8005c44 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c44:	68fb      	ldr	r3, [r7, #12]
	}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200007ac 	.word	0x200007ac
 8005c54:	200007b0 	.word	0x200007b0
 8005c58:	200008b4 	.word	0x200008b4

08005c5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d06e      	beq.n	8005d50 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c72:	4b3a      	ldr	r3, [pc, #232]	; (8005d5c <xTaskPriorityDisinherit+0x100>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d00a      	beq.n	8005c92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60fb      	str	r3, [r7, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	60bb      	str	r3, [r7, #8]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d044      	beq.n	8005d50 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d140      	bne.n	8005d50 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe fb78 	bl	80043c8 <uxListRemove>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d115      	bne.n	8005d0a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	491f      	ldr	r1, [pc, #124]	; (8005d60 <xTaskPriorityDisinherit+0x104>)
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xTaskPriorityDisinherit+0xae>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <xTaskPriorityDisinherit+0x108>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4013      	ands	r3, r2
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <xTaskPriorityDisinherit+0x108>)
 8005d08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	f1c3 0207 	rsb	r2, r3, #7
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	2201      	movs	r2, #1
 8005d24:	409a      	lsls	r2, r3
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <xTaskPriorityDisinherit+0x108>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	4a0d      	ldr	r2, [pc, #52]	; (8005d64 <xTaskPriorityDisinherit+0x108>)
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <xTaskPriorityDisinherit+0x104>)
 8005d3e:	441a      	add	r2, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f7fe fae1 	bl	800430e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d50:	697b      	ldr	r3, [r7, #20]
	}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200007ac 	.word	0x200007ac
 8005d60:	200007b0 	.word	0x200007b0
 8005d64:	200008b4 	.word	0x200008b4

08005d68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d077      	beq.n	8005e70 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	60fb      	str	r3, [r7, #12]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d902      	bls.n	8005dae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e002      	b.n	8005db4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d058      	beq.n	8005e70 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d153      	bne.n	8005e70 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d10a      	bne.n	8005de8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	60bb      	str	r3, [r7, #8]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	db04      	blt.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f1c3 0207 	rsb	r2, r3, #7
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	6959      	ldr	r1, [r3, #20]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e16:	4413      	add	r3, r2
 8005e18:	4299      	cmp	r1, r3
 8005e1a:	d129      	bne.n	8005e70 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe fad1 	bl	80043c8 <uxListRemove>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	2201      	movs	r2, #1
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43da      	mvns	r2, r3
 8005e38:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	2201      	movs	r2, #1
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4a06      	ldr	r2, [pc, #24]	; (8005e7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e62:	441a      	add	r2, r3
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fe fa4f 	bl	800430e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e70:	bf00      	nop
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	200007ac 	.word	0x200007ac
 8005e7c:	200007b0 	.word	0x200007b0
 8005e80:	200008b4 	.word	0x200008b4

08005e84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e96:	3201      	adds	r2, #1
 8005e98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005e9a:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
	}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	200007ac 	.word	0x200007ac

08005eac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eb6:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ebc:	4b28      	ldr	r3, [pc, #160]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fa80 	bl	80043c8 <uxListRemove>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ece:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43da      	mvns	r2, r3
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ee4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d10a      	bne.n	8005f04 <prvAddCurrentTaskToDelayedList+0x58>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	481a      	ldr	r0, [pc, #104]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005efe:	f7fe fa06 	bl	800430e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f02:	e026      	b.n	8005f52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0c:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d209      	bcs.n	8005f30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f1c:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3304      	adds	r3, #4
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f7fe fa14 	bl	8004356 <vListInsert>
}
 8005f2e:	e010      	b.n	8005f52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7fe fa0a 	bl	8004356 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d202      	bcs.n	8005f52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f4c:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6013      	str	r3, [r2, #0]
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200008b0 	.word	0x200008b0
 8005f60:	200007ac 	.word	0x200007ac
 8005f64:	200008b4 	.word	0x200008b4
 8005f68:	20000898 	.word	0x20000898
 8005f6c:	20000868 	.word	0x20000868
 8005f70:	20000864 	.word	0x20000864
 8005f74:	200008cc 	.word	0x200008cc

08005f78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3b04      	subs	r3, #4
 8005f88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f023 0201 	bic.w	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fa8:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <pxPortInitialiseStack+0x64>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3b14      	subs	r3, #20
 8005fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f06f 0202 	mvn.w	r2, #2
 8005fc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3b20      	subs	r3, #32
 8005fcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fce:	68fb      	ldr	r3, [r7, #12]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	08005fe1 	.word	0x08005fe1

08005fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <prvTaskExitError+0x54>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d00a      	beq.n	800600a <prvTaskExitError+0x2a>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60fb      	str	r3, [r7, #12]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <prvTaskExitError+0x28>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60bb      	str	r3, [r7, #8]
}
 800601c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800601e:	bf00      	nop
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0fc      	beq.n	8006020 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	20000020 	.word	0x20000020
	...

08006040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <pxCurrentTCBConst2>)
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	6808      	ldr	r0, [r1, #0]
 8006046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604a:	f380 8809 	msr	PSP, r0
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f380 8811 	msr	BASEPRI, r0
 800605a:	4770      	bx	lr
 800605c:	f3af 8000 	nop.w

08006060 <pxCurrentTCBConst2>:
 8006060:	200007ac 	.word	0x200007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop

08006068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006068:	4808      	ldr	r0, [pc, #32]	; (800608c <prvPortStartFirstTask+0x24>)
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	6800      	ldr	r0, [r0, #0]
 800606e:	f380 8808 	msr	MSP, r0
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8814 	msr	CONTROL, r0
 800607a:	b662      	cpsie	i
 800607c:	b661      	cpsie	f
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	df00      	svc	0
 8006088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800608a:	bf00      	nop
 800608c:	e000ed08 	.word	0xe000ed08

08006090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006096:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <xPortStartScheduler+0x120>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a46      	ldr	r2, [pc, #280]	; (80061b4 <xPortStartScheduler+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10a      	bne.n	80060b6 <xPortStartScheduler+0x26>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	613b      	str	r3, [r7, #16]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060b6:	4b3e      	ldr	r3, [pc, #248]	; (80061b0 <xPortStartScheduler+0x120>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3f      	ldr	r2, [pc, #252]	; (80061b8 <xPortStartScheduler+0x128>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10a      	bne.n	80060d6 <xPortStartScheduler+0x46>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060d6:	4b39      	ldr	r3, [pc, #228]	; (80061bc <xPortStartScheduler+0x12c>)
 80060d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <xPortStartScheduler+0x130>)
 80060fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060fe:	4b31      	ldr	r3, [pc, #196]	; (80061c4 <xPortStartScheduler+0x134>)
 8006100:	2207      	movs	r2, #7
 8006102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006104:	e009      	b.n	800611a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006106:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <xPortStartScheduler+0x134>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3b01      	subs	r3, #1
 800610c:	4a2d      	ldr	r2, [pc, #180]	; (80061c4 <xPortStartScheduler+0x134>)
 800610e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d0ef      	beq.n	8006106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006126:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <xPortStartScheduler+0x134>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1c3 0307 	rsb	r3, r3, #7
 800612e:	2b04      	cmp	r3, #4
 8006130:	d00a      	beq.n	8006148 <xPortStartScheduler+0xb8>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	60bb      	str	r3, [r7, #8]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006148:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <xPortStartScheduler+0x134>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <xPortStartScheduler+0x134>)
 8006150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <xPortStartScheduler+0x134>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800615a:	4a1a      	ldr	r2, [pc, #104]	; (80061c4 <xPortStartScheduler+0x134>)
 800615c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006166:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <xPortStartScheduler+0x138>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a17      	ldr	r2, [pc, #92]	; (80061c8 <xPortStartScheduler+0x138>)
 800616c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006172:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <xPortStartScheduler+0x138>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <xPortStartScheduler+0x138>)
 8006178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800617c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800617e:	f000 f8dd 	bl	800633c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006182:	4b12      	ldr	r3, [pc, #72]	; (80061cc <xPortStartScheduler+0x13c>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006188:	f000 f8fc 	bl	8006384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800618c:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <xPortStartScheduler+0x140>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0f      	ldr	r2, [pc, #60]	; (80061d0 <xPortStartScheduler+0x140>)
 8006192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006198:	f7ff ff66 	bl	8006068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800619c:	f7ff fa8e 	bl	80056bc <vTaskSwitchContext>
	prvTaskExitError();
 80061a0:	f7ff ff1e 	bl	8005fe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	e000ed00 	.word	0xe000ed00
 80061b4:	410fc271 	.word	0x410fc271
 80061b8:	410fc270 	.word	0x410fc270
 80061bc:	e000e400 	.word	0xe000e400
 80061c0:	200008d8 	.word	0x200008d8
 80061c4:	200008dc 	.word	0x200008dc
 80061c8:	e000ed20 	.word	0xe000ed20
 80061cc:	20000020 	.word	0x20000020
 80061d0:	e000ef34 	.word	0xe000ef34

080061d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	607b      	str	r3, [r7, #4]
}
 80061ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <vPortEnterCritical+0x58>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a0d      	ldr	r2, [pc, #52]	; (800622c <vPortEnterCritical+0x58>)
 80061f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061f8:	4b0c      	ldr	r3, [pc, #48]	; (800622c <vPortEnterCritical+0x58>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10f      	bne.n	8006220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <vPortEnterCritical+0x5c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <vPortEnterCritical+0x4c>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	603b      	str	r3, [r7, #0]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vPortEnterCritical+0x4a>
	}
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	20000020 	.word	0x20000020
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <vPortExitCritical+0x50>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <vPortExitCritical+0x24>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	607b      	str	r3, [r7, #4]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006258:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <vPortExitCritical+0x50>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3b01      	subs	r3, #1
 800625e:	4a09      	ldr	r2, [pc, #36]	; (8006284 <vPortExitCritical+0x50>)
 8006260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <vPortExitCritical+0x50>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d105      	bne.n	8006276 <vPortExitCritical+0x42>
 800626a:	2300      	movs	r3, #0
 800626c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f383 8811 	msr	BASEPRI, r3
}
 8006274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000020 	.word	0x20000020
	...

08006290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006290:	f3ef 8009 	mrs	r0, PSP
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <pxCurrentTCBConst>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	f01e 0f10 	tst.w	lr, #16
 80062a0:	bf08      	it	eq
 80062a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	6010      	str	r0, [r2, #0]
 80062ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062b4:	f380 8811 	msr	BASEPRI, r0
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f7ff f9fc 	bl	80056bc <vTaskSwitchContext>
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f380 8811 	msr	BASEPRI, r0
 80062cc:	bc09      	pop	{r0, r3}
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	6808      	ldr	r0, [r1, #0]
 80062d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d6:	f01e 0f10 	tst.w	lr, #16
 80062da:	bf08      	it	eq
 80062dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062e0:	f380 8809 	msr	PSP, r0
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst>:
 80062f0:	200007ac 	.word	0x200007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	607b      	str	r3, [r7, #4]
}
 8006310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006312:	f7ff f91b 	bl	800554c <xTaskIncrementTick>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <SysTick_Handler+0x40>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	2300      	movs	r3, #0
 8006326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f383 8811 	msr	BASEPRI, r3
}
 800632e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <vPortSetupTimerInterrupt+0x34>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <vPortSetupTimerInterrupt+0x38>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <vPortSetupTimerInterrupt+0x3c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0a      	ldr	r2, [pc, #40]	; (800637c <vPortSetupTimerInterrupt+0x40>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	099b      	lsrs	r3, r3, #6
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <vPortSetupTimerInterrupt+0x44>)
 800635a:	3b01      	subs	r3, #1
 800635c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <vPortSetupTimerInterrupt+0x34>)
 8006360:	2207      	movs	r2, #7
 8006362:	601a      	str	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	e000e010 	.word	0xe000e010
 8006374:	e000e018 	.word	0xe000e018
 8006378:	20000014 	.word	0x20000014
 800637c:	10624dd3 	.word	0x10624dd3
 8006380:	e000e014 	.word	0xe000e014

08006384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006394 <vPortEnableVFP+0x10>
 8006388:	6801      	ldr	r1, [r0, #0]
 800638a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800638e:	6001      	str	r1, [r0, #0]
 8006390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006392:	bf00      	nop
 8006394:	e000ed88 	.word	0xe000ed88

08006398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800639e:	f3ef 8305 	mrs	r3, IPSR
 80063a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b0f      	cmp	r3, #15
 80063a8:	d914      	bls.n	80063d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063aa:	4a17      	ldr	r2, [pc, #92]	; (8006408 <vPortValidateInterruptPriority+0x70>)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063b4:	4b15      	ldr	r3, [pc, #84]	; (800640c <vPortValidateInterruptPriority+0x74>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	7afa      	ldrb	r2, [r7, #11]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d20a      	bcs.n	80063d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	607b      	str	r3, [r7, #4]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063d4:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <vPortValidateInterruptPriority+0x78>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <vPortValidateInterruptPriority+0x7c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d90a      	bls.n	80063fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	603b      	str	r3, [r7, #0]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <vPortValidateInterruptPriority+0x60>
	}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	e000e3f0 	.word	0xe000e3f0
 800640c:	200008d8 	.word	0x200008d8
 8006410:	e000ed0c 	.word	0xe000ed0c
 8006414:	200008dc 	.word	0x200008dc

08006418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006424:	f7fe ffe8 	bl	80053f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006428:	4b5b      	ldr	r3, [pc, #364]	; (8006598 <pvPortMalloc+0x180>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006430:	f000 f920 	bl	8006674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006434:	4b59      	ldr	r3, [pc, #356]	; (800659c <pvPortMalloc+0x184>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4013      	ands	r3, r2
 800643c:	2b00      	cmp	r3, #0
 800643e:	f040 8093 	bne.w	8006568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01d      	beq.n	8006484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006448:	2208      	movs	r2, #8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b00      	cmp	r3, #0
 8006458:	d014      	beq.n	8006484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f023 0307 	bic.w	r3, r3, #7
 8006460:	3308      	adds	r3, #8
 8006462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <pvPortMalloc+0x6c>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	617b      	str	r3, [r7, #20]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d06e      	beq.n	8006568 <pvPortMalloc+0x150>
 800648a:	4b45      	ldr	r3, [pc, #276]	; (80065a0 <pvPortMalloc+0x188>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	429a      	cmp	r2, r3
 8006492:	d869      	bhi.n	8006568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006494:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <pvPortMalloc+0x18c>)
 8006496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006498:	4b42      	ldr	r3, [pc, #264]	; (80065a4 <pvPortMalloc+0x18c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800649e:	e004      	b.n	80064aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d903      	bls.n	80064bc <pvPortMalloc+0xa4>
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f1      	bne.n	80064a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064bc:	4b36      	ldr	r3, [pc, #216]	; (8006598 <pvPortMalloc+0x180>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d050      	beq.n	8006568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2208      	movs	r2, #8
 80064cc:	4413      	add	r3, r2
 80064ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	2308      	movs	r3, #8
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d91f      	bls.n	8006528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4413      	add	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <pvPortMalloc+0xf8>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	613b      	str	r3, [r7, #16]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1ad2      	subs	r2, r2, r3
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006522:	69b8      	ldr	r0, [r7, #24]
 8006524:	f000 f908 	bl	8006738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006528:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <pvPortMalloc+0x188>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <pvPortMalloc+0x188>)
 8006534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006536:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <pvPortMalloc+0x188>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <pvPortMalloc+0x190>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d203      	bcs.n	800654a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006542:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <pvPortMalloc+0x188>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <pvPortMalloc+0x190>)
 8006548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <pvPortMalloc+0x184>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	431a      	orrs	r2, r3
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800655e:	4b13      	ldr	r3, [pc, #76]	; (80065ac <pvPortMalloc+0x194>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <pvPortMalloc+0x194>)
 8006566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006568:	f7fe ff54 	bl	8005414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <pvPortMalloc+0x174>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60fb      	str	r3, [r7, #12]
}
 8006588:	bf00      	nop
 800658a:	e7fe      	b.n	800658a <pvPortMalloc+0x172>
	return pvReturn;
 800658c:	69fb      	ldr	r3, [r7, #28]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3728      	adds	r7, #40	; 0x28
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200044e8 	.word	0x200044e8
 800659c:	200044fc 	.word	0x200044fc
 80065a0:	200044ec 	.word	0x200044ec
 80065a4:	200044e0 	.word	0x200044e0
 80065a8:	200044f0 	.word	0x200044f0
 80065ac:	200044f4 	.word	0x200044f4

080065b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d04d      	beq.n	800665e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065c2:	2308      	movs	r3, #8
 80065c4:	425b      	negs	r3, r3
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4413      	add	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	4b24      	ldr	r3, [pc, #144]	; (8006668 <vPortFree+0xb8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <vPortFree+0x44>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60fb      	str	r3, [r7, #12]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <vPortFree+0x62>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	60bb      	str	r3, [r7, #8]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <vPortFree+0xb8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01e      	beq.n	800665e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11a      	bne.n	800665e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <vPortFree+0xb8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	43db      	mvns	r3, r3
 8006632:	401a      	ands	r2, r3
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006638:	f7fe fede 	bl	80053f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <vPortFree+0xbc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4413      	add	r3, r2
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <vPortFree+0xbc>)
 8006648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800664a:	6938      	ldr	r0, [r7, #16]
 800664c:	f000 f874 	bl	8006738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <vPortFree+0xc0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	4a06      	ldr	r2, [pc, #24]	; (8006670 <vPortFree+0xc0>)
 8006658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800665a:	f7fe fedb 	bl	8005414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	200044fc 	.word	0x200044fc
 800666c:	200044ec 	.word	0x200044ec
 8006670:	200044f8 	.word	0x200044f8

08006674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800667a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800667e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006680:	4b27      	ldr	r3, [pc, #156]	; (8006720 <prvHeapInit+0xac>)
 8006682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3307      	adds	r3, #7
 8006692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	4a1f      	ldr	r2, [pc, #124]	; (8006720 <prvHeapInit+0xac>)
 80066a4:	4413      	add	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <prvHeapInit+0xb0>)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <prvHeapInit+0xb0>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	4413      	add	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066c0:	2208      	movs	r2, #8
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a15      	ldr	r2, [pc, #84]	; (8006728 <prvHeapInit+0xb4>)
 80066d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066d6:	4b14      	ldr	r3, [pc, #80]	; (8006728 <prvHeapInit+0xb4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <prvHeapInit+0xb4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <prvHeapInit+0xb4>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <prvHeapInit+0xb8>)
 8006702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <prvHeapInit+0xbc>)
 800670a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <prvHeapInit+0xc0>)
 800670e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006712:	601a      	str	r2, [r3, #0]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	200008e0 	.word	0x200008e0
 8006724:	200044e0 	.word	0x200044e0
 8006728:	200044e8 	.word	0x200044e8
 800672c:	200044f0 	.word	0x200044f0
 8006730:	200044ec 	.word	0x200044ec
 8006734:	200044fc 	.word	0x200044fc

08006738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006740:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <prvInsertBlockIntoFreeList+0xac>)
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e002      	b.n	800674c <prvInsertBlockIntoFreeList+0x14>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d8f7      	bhi.n	8006746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4413      	add	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d108      	bne.n	800677a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	441a      	add	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d118      	bne.n	80067c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d00d      	beq.n	80067b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	441a      	add	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e008      	b.n	80067c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <prvInsertBlockIntoFreeList+0xb0>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e003      	b.n	80067c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d002      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	200044e0 	.word	0x200044e0
 80067e8:	200044e8 	.word	0x200044e8

080067ec <memset>:
 80067ec:	4402      	add	r2, r0
 80067ee:	4603      	mov	r3, r0
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d100      	bne.n	80067f6 <memset+0xa>
 80067f4:	4770      	bx	lr
 80067f6:	f803 1b01 	strb.w	r1, [r3], #1
 80067fa:	e7f9      	b.n	80067f0 <memset+0x4>

080067fc <strncmp>:
 80067fc:	b510      	push	{r4, lr}
 80067fe:	b16a      	cbz	r2, 800681c <strncmp+0x20>
 8006800:	3901      	subs	r1, #1
 8006802:	1884      	adds	r4, r0, r2
 8006804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006808:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800680c:	429a      	cmp	r2, r3
 800680e:	d103      	bne.n	8006818 <strncmp+0x1c>
 8006810:	42a0      	cmp	r0, r4
 8006812:	d001      	beq.n	8006818 <strncmp+0x1c>
 8006814:	2a00      	cmp	r2, #0
 8006816:	d1f5      	bne.n	8006804 <strncmp+0x8>
 8006818:	1ad0      	subs	r0, r2, r3
 800681a:	bd10      	pop	{r4, pc}
 800681c:	4610      	mov	r0, r2
 800681e:	e7fc      	b.n	800681a <strncmp+0x1e>

08006820 <__libc_init_array>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	4d0d      	ldr	r5, [pc, #52]	; (8006858 <__libc_init_array+0x38>)
 8006824:	4c0d      	ldr	r4, [pc, #52]	; (800685c <__libc_init_array+0x3c>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	2600      	movs	r6, #0
 800682c:	42a6      	cmp	r6, r4
 800682e:	d109      	bne.n	8006844 <__libc_init_array+0x24>
 8006830:	4d0b      	ldr	r5, [pc, #44]	; (8006860 <__libc_init_array+0x40>)
 8006832:	4c0c      	ldr	r4, [pc, #48]	; (8006864 <__libc_init_array+0x44>)
 8006834:	f000 f82e 	bl	8006894 <_init>
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	2600      	movs	r6, #0
 800683e:	42a6      	cmp	r6, r4
 8006840:	d105      	bne.n	800684e <__libc_init_array+0x2e>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	f855 3b04 	ldr.w	r3, [r5], #4
 8006848:	4798      	blx	r3
 800684a:	3601      	adds	r6, #1
 800684c:	e7ee      	b.n	800682c <__libc_init_array+0xc>
 800684e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006852:	4798      	blx	r3
 8006854:	3601      	adds	r6, #1
 8006856:	e7f2      	b.n	800683e <__libc_init_array+0x1e>
 8006858:	080076d8 	.word	0x080076d8
 800685c:	080076d8 	.word	0x080076d8
 8006860:	080076d8 	.word	0x080076d8
 8006864:	080076dc 	.word	0x080076dc

08006868 <strcpy>:
 8006868:	4603      	mov	r3, r0
 800686a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800686e:	f803 2b01 	strb.w	r2, [r3], #1
 8006872:	2a00      	cmp	r2, #0
 8006874:	d1f9      	bne.n	800686a <strcpy+0x2>
 8006876:	4770      	bx	lr

08006878 <memcpy>:
 8006878:	440a      	add	r2, r1
 800687a:	4291      	cmp	r1, r2
 800687c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006880:	d100      	bne.n	8006884 <memcpy+0xc>
 8006882:	4770      	bx	lr
 8006884:	b510      	push	{r4, lr}
 8006886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800688e:	4291      	cmp	r1, r2
 8006890:	d1f9      	bne.n	8006886 <memcpy+0xe>
 8006892:	bd10      	pop	{r4, pc}

08006894 <_init>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr

080068a0 <_fini>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr
